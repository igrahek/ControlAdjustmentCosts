kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 4 intervals Threshold")
# Threshold - A-S 2 intervals
Diff_2 = thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed
Diff_2 = as.data.frame(Diff_2)
h = (hypothesis(Diff_2,"Diff_2<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 2 intervals Threshold")
# Drift - A-S fixed
Diff_Fix = driftEveryCondition$Drift_Fixed_Accuracy - driftEveryCondition$Drift_Fixed_Speed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed Drift")
# Drift - A-S 8 intervals
Diff_8 = driftEveryCondition$Drift_8intervals_Accuracy - driftEveryCondition$Drift_8intervals_Speed
Diff_8 = as.data.frame(Diff_8)
h = (hypothesis(Diff_8,"Diff_8<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 8 intervals Drift")
# Drift - A-S 4 intervals
Diff_4 = driftEveryCondition$Drift_4intervals_Accuracy - driftEveryCondition$Drift_4intervals_Speed
Diff_4 = as.data.frame(Diff_4)
h = (hypothesis(Diff_4,"Diff_4<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 4 intervals Drift")
# Drift - A-S 2 intervals
Diff_2 = driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed
Diff_2 = as.data.frame(Diff_2)
h = (hypothesis(Diff_2,"Diff_2<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 2 intervals Drift")
# Drift - Cost Fix vs. 8
Diff = Diff_Fix - Diff_8
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 8 Cost")
# Drift - Cost Fix vs. 4
Diff = Diff_Fix - Diff_4
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 4 Cost")
# Drift - Cost Fix vs. 2
Diff = Diff_Fix - Diff_2
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 2 Cost")
# Threshold - A-S fixed
Diff_Fix = thresholdEveryCondition$Threshold_Fixed_Accuracy - thresholdEveryCondition$Threshold_Fixed_Speed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed Threshold")
# Threshold - A-S 8 intervals
Diff_8 = thresholdEveryCondition$Threshold_8intervals_Accuracy - thresholdEveryCondition$Threshold_8intervals_Speed
Diff_8 = as.data.frame(Diff_8)
h = (hypothesis(Diff_8,"Diff_8<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 8 intervals Threshold")
# Threshold - A-S 4 intervals
Diff_4 = thresholdEveryCondition$Threshold_4intervals_Accuracy - thresholdEveryCondition$Threshold_4intervals_Speed
Diff_4 = as.data.frame(Diff_4)
h = (hypothesis(Diff_4,"Diff_4<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 4 intervals Threshold")
# Threshold - A-S 2 intervals
Diff_2 = thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed
Diff_2 = as.data.frame(Diff_2)
h = (hypothesis(Diff_2,"Diff_2<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed 2 intervals Threshold")
# Threshold - Cost Fix vs. 8
Diff = Diff_Fix - Diff_8
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 8 Cost")
# Threshold - Cost Fix vs. 4
Diff = Diff_Fix - Diff_4
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 4 Cost")
# Threshold - Cost Fix vs. 2
Diff = Diff_Fix - Diff_2
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed X Fix vs. 2 Cost")
# Loading libraries
```{r, message=FALSE}
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
```
## Import the posteriors
```{r, message=FALSE}
traces <- read.csv('output/Mixed/ae_only/modelMixed3/modelMixed3_traces.csv')
traces<-traces %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Poly..Linear,
a_C.blockType..Poly..Quadratic,
a_C.blockType..Poly..Cubic,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.congruency..Sum..S.incongruent.,
v_C.blockType..Poly..Linear,
v_C.blockType..Poly..Quadratic,
v_C.blockType..Poly..Cubic,
v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear,
v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic,
v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier)%>%
mutate(a_Intercept=0.5*a_Intercept,
a_C.intervalType..Sum..S.Speed.=0.5*a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Poly..Linear=0.5*a_C.blockType..Poly..Linear,
a_C.blockType..Poly..Quadratic=0.5*a_C.blockType..Poly..Quadratic,
a_C.blockType..Poly..Cubic=0.5*a_C.blockType..Poly..Cubic,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear=0.5*a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic=0.5*a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic,
a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic=0.5*a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic,
a_scaledRunningTime = 0.5*a_scaledRunningTime)
```
## Parameter estimates
```{r, message=FALSE}
summary_traces = traces
# Get the correct estimates (relative to sum & poly coding)
summary_traces$a_C.intervalType..Sum..S.Speed. = summary_traces$a_C.intervalType..Sum..S.Speed. * 2
summary_traces$v_C.intervalType..Sum..S.Speed. = summary_traces$v_C.intervalType..Sum..S.Speed. * 2
summary_traces$a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear = (summary_traces$a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear/0.6708204) * 2
summary_traces$v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear = (summary_traces$v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear/0.6708204) * 2
output <- test.params(summary_traces)
summary <- test.params(summary_traces)
summary$CI_upper <- round(summary$CI_upper,2)
summary$CI_lower <- round(summary$CI_lower,2)
summary$CI <- paste0(summary$CI_lower,", ",summary$CI_upper)
summary$Mean <- round(summary$Mean,2)
summary$pvalue <- round(summary$pvalue,2)
kable(summary)
```
## Transform the traces
```{r, message=FALSE}
# Transform thresholds main effects
thresholdTransform = traces[,c("a_Intercept",
"a_C.blockType..Poly..Linear",
"a_C.blockType..Poly..Quadratic",
"a_C.blockType..Poly..Cubic")]
thresholdTransform$a_Intercept = rep(mean(thresholdTransform$a_Intercept), length(thresholdTransform$a_Intercept))
contrastMatrix = cbind(c(1,1,1,1),contr.poly(4))
tresholdByCondition = t(as.matrix(contrastMatrix) %*% t(as.matrix(thresholdTransform)))
colnames(tresholdByCondition) = c("a_Main_2intervals", "a_Main_4intervals", "a_Main_8intervals","a_Main_Fixed")
tresholdByCondition = as.data.frame(tresholdByCondition)
# Transform thresholds interactions
thresholdTransform = traces[,c("a_C.intervalType..Sum..S.Speed.",
"a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear",
"a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic",
"a_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic")]
contrastMatrix = cbind(c(1,1,1,1),contr.poly(4))
tresholdByConditionInteraction = t(as.matrix(contrastMatrix) %*% t(as.matrix(thresholdTransform)))
colnames(tresholdByConditionInteraction) = c("a_Interaction_2intervals", "a_Interaction_4intervals", "a_Interaction_8intervals","a_Interaction_Fixed")
tresholdByConditionInteraction = as.data.frame(tresholdByConditionInteraction)
# Calculate threshold per condition
thresholdEveryCondition = as.data.frame(matrix(1,length(tresholdByConditionInteraction$a_Interaction_2intervals)))
thresholdEveryCondition$Threshold_2intervals_Speed = tresholdByCondition$a_Main_2intervals + tresholdByConditionInteraction$a_Interaction_2intervals
thresholdEveryCondition$Threshold_2intervals_Accuracy = tresholdByCondition$a_Main_2intervals - tresholdByConditionInteraction$a_Interaction_2intervals
thresholdEveryCondition$Threshold_2intervals = thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed
thresholdEveryCondition$Threshold_4intervals_Speed = tresholdByCondition$a_Main_4intervals + tresholdByConditionInteraction$a_Interaction_4intervals
thresholdEveryCondition$Threshold_4intervals_Accuracy = tresholdByCondition$a_Main_4intervals - tresholdByConditionInteraction$a_Interaction_4intervals
thresholdEveryCondition$Threshold_4intervals = thresholdEveryCondition$Threshold_4intervals_Accuracy - thresholdEveryCondition$Threshold_4intervals_Speed
thresholdEveryCondition$Threshold_8intervals_Speed = tresholdByCondition$a_Main_8intervals + tresholdByConditionInteraction$a_Interaction_8intervals
thresholdEveryCondition$Threshold_8intervals_Accuracy = tresholdByCondition$a_Main_8intervals - tresholdByConditionInteraction$a_Interaction_8intervals
thresholdEveryCondition$Threshold_8intervals = thresholdEveryCondition$Threshold_8intervals_Accuracy - thresholdEveryCondition$Threshold_8intervals_Speed
thresholdEveryCondition$Threshold_Fixed_Speed = tresholdByCondition$a_Main_Fixed + tresholdByConditionInteraction$a_Interaction_Fixed
thresholdEveryCondition$Threshold_Fixed_Accuracy = tresholdByCondition$a_Main_Fixed - tresholdByConditionInteraction$a_Interaction_Fixed
thresholdEveryCondition$Threshold_Fixed = thresholdEveryCondition$Threshold_Fixed_Accuracy - thresholdEveryCondition$Threshold_Fixed_Speed
thresholdEveryCondition = thresholdEveryCondition[,-1]
output <- test.params(thresholdEveryCondition)
# Transform drift main effects
driftTransform = traces[,c("v_Intercept",
"v_C.blockType..Poly..Linear",
"v_C.blockType..Poly..Quadratic",
"v_C.blockType..Poly..Cubic")]
driftTransform$v_Intercept = rep(mean(driftTransform$v_Intercept), length(driftTransform$v_Intercept))
contrastMatrix = cbind(c(1,1,1,1),contr.poly(4))
driftByCondition = t(as.matrix(contrastMatrix) %*% t(as.matrix(driftTransform)))
colnames(driftByCondition) = c("v_Main_2intervals", "v_Main_4intervals", "v_Main_8intervals","v_Main_Fixed")
driftByCondition = as.data.frame(driftByCondition)
# Transform drift interactions
driftTransform = traces[,c("v_C.intervalType..Sum..S.Speed.",
"v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Linear",
"v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Quadratic",
"v_C.intervalType..Sum..S.Speed..C.blockType..Poly..Cubic")]
contrastMatrix = cbind(c(1,1,1,1),contr.poly(4))
driftByConditionInteraction = t(as.matrix(contrastMatrix) %*% t(as.matrix(driftTransform)))
colnames(driftByConditionInteraction) = c("v_Interaction_2intervals", "v_Interaction_4intervals", "v_Interaction_8intervals","v_Interaction_Fixed")
driftByConditionInteraction = as.data.frame(driftByConditionInteraction)
# Calculate drift per condition
driftEveryCondition = as.data.frame(matrix(1,length(driftByConditionInteraction$v_Interaction_2intervals)))
driftEveryCondition$Drift_2intervals_Speed = driftByCondition$v_Main_2intervals + driftByConditionInteraction$v_Interaction_2intervals
driftEveryCondition$Drift_2intervals_Accuracy = driftByCondition$v_Main_2intervals - driftByConditionInteraction$v_Interaction_2intervals
driftEveryCondition$Drift_2intervals = driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed
driftEveryCondition$Drift_4intervals_Speed = driftByCondition$v_Main_4intervals + driftByConditionInteraction$v_Interaction_4intervals
driftEveryCondition$Drift_4intervals_Accuracy = driftByCondition$v_Main_4intervals - driftByConditionInteraction$v_Interaction_4intervals
driftEveryCondition$Drift_4intervals = driftEveryCondition$Drift_4intervals_Accuracy - driftEveryCondition$Drift_4intervals_Speed
driftEveryCondition$Drift_8intervals_Speed = driftByCondition$v_Main_8intervals + driftByConditionInteraction$v_Interaction_8intervals
driftEveryCondition$Drift_8intervals_Accuracy = driftByCondition$v_Main_8intervals - driftByConditionInteraction$v_Interaction_8intervals
driftEveryCondition$Drift_8intervals = driftEveryCondition$Drift_8intervals_Accuracy - driftEveryCondition$Drift_8intervals_Speed
driftEveryCondition$Drift_Fixed_Speed = driftByCondition$v_Main_Fixed + driftByConditionInteraction$v_Interaction_Fixed
driftEveryCondition$Drift_Fixed_Accuracy = driftByCondition$v_Main_Fixed - driftByConditionInteraction$v_Interaction_Fixed
driftEveryCondition$Drift_Fixed = driftEveryCondition$Drift_Fixed_Accuracy - driftEveryCondition$Drift_Fixed_Speed
driftEveryCondition = driftEveryCondition[,-1]
output <- test.params(driftEveryCondition)
### Summaries
summary = cbind(driftByCondition,driftByConditionInteraction,tresholdByCondition,tresholdByConditionInteraction)
output <- test.params(summary)
va <- output %>% separate(parameter,c('parameter','effect','block'),'_')
labels <- c('Threshold','Drift')
va$effect = as.factor(va$effect)
va$block = as.factor(va$block)
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
```
## Drift rate and threshold
### Bar plot
```{r, message=FALSE}
output1 <- test.params(driftEveryCondition)
output2 = test.params(thresholdEveryCondition)
output = rbind(output1,output2)
output = output[c(3,6,9,12,15,18,21,24),]
va <- output %>% separate(parameter,c('parameter','block'),'_')
# Change the labels
va$block = factor(va$block, labels = c("Switch 2","Switch 4","Switch 8","Fixed"))
va$block = as.factor(va$block)
va$block = ordered(va$block, levels = c("Fixed","Switch 8","Switch 4","Switch 2"))
va$parameter<-factor(va$parameter,levels = c("Drift","Threshold"))
Color1 = rgb(0.35, 0.35, 0.35)
Color2 = rgb(0.5, 0.5, 0.5)
Color3 = rgb(0.7, 0.7, 0.7)
Color4 = rgb(0.8, 0.8, 0.8)
va$plotting = c(4,3,2,1,4,3,2,1)
# Plot
p<-ggplot(va,aes(x=plotting, y=Mean,fill=block)) +
geom_bar(width=1,stat="identity", position=position_dodge(0.6)) +
geom_errorbar(width=.1, size=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower,ymax=CI_upper)) + ylab('Estimate') +
facet_wrap(vars(parameter), labeller = as_labeller(c('Drift'="Drift rate",'Threshold'="Threshold")))+
ylim(-0.05,0.5)+
geom_hline(yintercept=0) +
scale_fill_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.78, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
```
### Points in 2D
```{r, message=FALSE}
drift.rate<- test.params(driftEveryCondition)[-c(3,6,9,12),]
threshold<- test.params(thresholdEveryCondition)[-c(3,6,9,12),]
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','fixed','factor'),'_')
va$factor = as.factor(va$factor)
# va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
# data = subset(va,fixed=="Varying")
# data = subset(va,isi=="ISI250")
data = va
# data$parameter = c("Drift","Drift","Drift","Drift","Threshold","Threshold","Threshold","Threshold")
# Long to wide
data = pivot_wider(data = data,
id_cols = c(factor,fixed),
names_from = parameter,
values_from = c("Mean","CI_lower","CI_upper"))
# data$factor = c("Speed", "Accuracy","Speed", "Accuracy")
data$factor = factor(data$factor, levels = c("Speed", "Accuracy"))
levels(data$factor) = c("Speed", "Accuracy")
data$fixed = factor(data$fixed, levels = c("Fixed","8intervals","4intervals","2intervals"))
# data$factor = c("Speed", "Accuracy","Speed & Accuracy" )
p<-ggplot(data,aes(x=Mean_Drift, y=Mean_Threshold,color=factor)) +
geom_point(size=5) +
geom_errorbar(width=0, size=1.1, position=position_dodge(width = .6),aes(xmin=CI_lower_Drift,xmax=CI_upper_Drift)) +
geom_errorbar(width=0, size=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower_Threshold,ymax=CI_upper_Threshold))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_wrap(~fixed,nrow=1) +
ylab("Threshold") +
xlab("Drift Rate") +
scale_x_continuous(limits = c(2.7,4))+
scale_y_continuous(limits = c(0.6,1.2))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none")
p
Fig5.DDM = p
```
# Distance
Distance_Fixed = sqrt((driftEveryCondition$Drift_Fixed_Accuracy - DriftEveryCondition$Drift_Fixed_Speed)**2 + (thresholdEveryCondition$Threshold_Fixed_Accuracy - thresholdEveryCondition$Threshold_Fixed_Speed)**2)
Diff_Fix = driftEveryCondition$Drift_Fixed_Accuracy - driftEveryCondition$Drift_Fixed_Speed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed Drift")
# Distance
Distance_Fixed = sqrt((driftEveryCondition$Drift_Fixed_Accuracy - driftEveryCondition$Drift_Fixed_Speed)**2 + (thresholdEveryCondition$Threshold_Fixed_Accuracy - thresholdEveryCondition$Threshold_Fixed_Speed)**2)
# Distance
Distance_8 = sqrt((driftEveryCondition$Drift_8intervals_Accuracy - driftEveryCondition$Drift_8intervals_Speed)**2 + (thresholdEveryCondition$Threshold_8intervals_Accuracy - thresholdEveryCondition$Threshold_8intervals_Speed)**2)
Distance_2 = sqrt((driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed)**2 + (thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_2)))
Distance_2 = sqrt((driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed)**2 + (thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_2)))
kable(test.params(as.data.frame(Distance_Fixed-Distance_4)))
Distance_4 = sqrt((driftEveryCondition$Drift_4intervals_Accuracy - driftEveryCondition$Drift_4intervals_Speed)**2 + (thresholdEveryCondition$Threshold_4intervals_Accuracy - thresholdEveryCondition$Threshold_4intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_4)))
kable(test.params(as.data.frame(Distance_Fixed-Distance_8)))
Distance_2 = sqrt((driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed)**2 + (thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_2)))
Distance_8 = sqrt((driftEveryCondition$Drift_8intervals_Accuracy - driftEveryCondition$Drift_8intervals_Speed)**2 + (thresholdEveryCondition$Threshold_8intervals_Accuracy - thresholdEveryCondition$Threshold_8intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_8)))
Distance_4 = sqrt((driftEveryCondition$Drift_4intervals_Accuracy - driftEveryCondition$Drift_4intervals_Speed)**2 + (thresholdEveryCondition$Threshold_4intervals_Accuracy - thresholdEveryCondition$Threshold_4intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_4)))
Distance_2 = sqrt((driftEveryCondition$Drift_2intervals_Accuracy - driftEveryCondition$Drift_2intervals_Speed)**2 + (thresholdEveryCondition$Threshold_2intervals_Accuracy - thresholdEveryCondition$Threshold_2intervals_Speed)**2)
kable(test.params(as.data.frame(Distance_Fixed-Distance_2)))
# Study 1
# Create a data frame
Study1Distance = data.frame(
Parameter = c("Distance"),
Effect = c("Acc-Speed"),
Mean = c(0.86),
CI_lower = c(-0.05),
CI_upper = c(0.23)
)
# Study 2
# Create a data frame
Study2Distance = data.frame(
Parameter = c("Distance","Distance","Distance"),
Effect = c("Acc-SA","SA-Speed","Acc-Speed"),
Mean = c(0.09,0.25,0.35),
CI_lower = c(-0.09,0.01,0.15),
CI_upper = c(0.27,0.48,0.55)
)
# Study 3
# Create a data frame
Study3Distance = data.frame(
Parameter = c("Distance","Distance"),
Effect = c("1000ms","250ms"),
Mean = c(0.08,0.07),
CI_lower = c(-0.05,-0.06),
CI_upper = c(0.20,0.21)
)
# Study 4
# Create a data frame
Study4Distance = data.frame(
Parameter = c("Distance","Distance","Distance"),
Effect = c("Fix-8","Fix-4","Fix-2"),
Mean = c(0.00,0.17,0.17),
CI_lower = c(-0.16,0.01,-0.01),
CI_upper = c(0.16,0.34,0.35)
)
Studies_Distance = rbind(Study1Distance,Study2Distance,Study3Distance,Study4Distance)
Studies_Distance$Effect = factor(Studies_Distance$Effect, levels = rev(unique(Studies_Distance$Effect)))
# Create the forest plot
ggplot(Studies_Distance, aes(x = Mean, y = Effect)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = CI_lower, xmax = CI_upper), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
facet_wrap(~Parameter)+
labs(title = "Forest Plot", x = "Mean", y = NULL) +
theme_minimal() +
theme(legend.position = "bottom")
View(Studies_Distance)
# Study 1
# Create a data frame
Study1Distance = data.frame(
Parameter = c("Distance"),
Effect = c("Acc-Speed"),
Mean = c(0.86),
CI_lower = c(-0.05),
CI_upper = c(0.23)
)
# Study 2
# Create a data frame
Study2Distance = data.frame(
Parameter = c("Distance","Distance","Distance"),
Effect = c("Acc-SA","SA-Speed","Acc-S"),
Mean = c(0.09,0.25,0.35),
CI_lower = c(-0.09,0.01,0.15),
CI_upper = c(0.27,0.48,0.55)
)
# Study 3
# Create a data frame
Study3Distance = data.frame(
Parameter = c("Distance","Distance"),
Effect = c("1000ms","250ms"),
Mean = c(0.08,0.07),
CI_lower = c(-0.05,-0.06),
CI_upper = c(0.20,0.21)
)
# Study 4
# Create a data frame
Study4Distance = data.frame(
Parameter = c("Distance","Distance","Distance"),
Effect = c("Fix-8","Fix-4","Fix-2"),
Mean = c(0.00,0.17,0.17),
CI_lower = c(-0.16,0.01,-0.01),
CI_upper = c(0.16,0.34,0.35)
)
Studies_Distance = rbind(Study1Distance,Study2Distance,Study3Distance,Study4Distance)
Studies_Distance$Effect = factor(Studies_Distance$Effect, levels = rev(unique(Studies_Distance$Effect)))
# Create the forest plot
ggplot(Studies_Distance, aes(x = Mean, y = Effect)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = CI_lower, xmax = CI_upper), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
facet_wrap(~Parameter)+
labs(title = "Forest Plot", x = "Mean", y = NULL) +
theme_minimal() +
theme(legend.position = "bottom")
