v_C.intervalType..Poly..Linear_Fixed = v_C.intervalType..Poly..Linear - v_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying.,
v_C.intervalType..Poly..Linear_Varying = v_C.intervalType..Poly..Linear + v_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying.,
v_C.intervalType..Poly..Quadratic_Fixed = v_C.intervalType..Poly..Quadratic - v_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying.,
v_C.intervalType..Poly..Quadratic_Varying = v_C.intervalType..Poly..Quadratic + v_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying.)
traces<-traces %>% dplyr::mutate(a_Speed_Varying = a_Varying - 0.7071068 * a_C.intervalType..Poly..Linear_Varying + 0.4082483 * a_C.intervalType..Poly..Quadratic_Varying,
a_Speed_Fixed = a_Fixed - 0.7071068 * a_C.intervalType..Poly..Linear_Fixed + 0.4082483 * a_C.intervalType..Poly..Quadratic_Fixed,
a_Acc_Varying = a_Varying - 0.8164966 * a_C.intervalType..Poly..Quadratic_Varying,
a_Acc_Fixed = a_Fixed - 0.8164966 * a_C.intervalType..Poly..Quadratic_Fixed,
a_SpeedAcc_Varying = a_Varying + 0.7071068 * a_C.intervalType..Poly..Linear_Varying + 0.4082483 * a_C.intervalType..Poly..Quadratic_Varying,
a_SpeedAcc_Fixed = a_Fixed + 0.7071068 * a_C.intervalType..Poly..Linear_Fixed + 0.4082483 * a_C.intervalType..Poly..Quadratic_Fixed,
v_Speed_Varying = v_Varying - 0.7071068 * v_C.intervalType..Poly..Linear_Varying + 0.4082483 * v_C.intervalType..Poly..Quadratic_Varying,
v_Speed_Fixed = v_Fixed - 0.7071068 * v_C.intervalType..Poly..Linear_Fixed + 0.4082483 * v_C.intervalType..Poly..Quadratic_Fixed,
v_Acc_Varying = v_Varying - 0.8164966 * v_C.intervalType..Poly..Quadratic_Varying,
v_Acc_Fixed = v_Fixed - 0.8164966 * v_C.intervalType..Poly..Quadratic_Fixed,
v_SpeedAcc_Varying = v_Varying + 0.7071068 * v_C.intervalType..Poly..Linear_Varying + 0.4082483 * v_C.intervalType..Poly..Quadratic_Varying,
v_SpeedAcc_Fixed = v_Fixed + 0.7071068 * v_C.intervalType..Poly..Linear_Fixed + 0.4082483 * v_C.intervalType..Poly..Quadratic_Fixed)
traces<-traces %>% dplyr::mutate(a_AccMinSpeed_Varying = a_Acc_Varying - a_Speed_Varying,
a_AccMinSpeedAcc_Varying = a_Acc_Varying - a_SpeedAcc_Varying,
a_SpeedAccMinSpeed_Varying = a_SpeedAcc_Varying - a_Speed_Varying,
a_AccMinSpeed_Fixed = a_Acc_Fixed - a_Speed_Fixed,
a_AccMinSpeedAcc_Fixed = a_Acc_Fixed - a_SpeedAcc_Fixed,
a_SpeedAccMinSpeed_Fixed = a_SpeedAcc_Fixed - a_Speed_Fixed,
v_AccMinSpeed_Varying = v_Acc_Varying - v_Speed_Varying,
v_AccMinSpeedAcc_Varying = v_Acc_Varying - v_SpeedAcc_Varying,
v_SpeedAccMinSpeed_Varying = v_SpeedAcc_Varying - v_Speed_Varying,
v_AccMinSpeed_Fixed = v_Acc_Fixed - v_Speed_Fixed,
v_AccMinSpeedAcc_Fixed = v_Acc_Fixed - v_SpeedAcc_Fixed,
v_SpeedAccMinSpeed_Fixed = v_SpeedAcc_Fixed - v_Speed_Fixed)
```
### Summarry of the parameter estimates
```{r, message=FALSE}
summary = read.csv('output/Mixed/ae_only/modelMixed3/modelMixed3_traces.csv')
summary<-summary %>% dplyr::select(a_Intercept,
a_C.blockType..Sum..S.Varying.,
a_C.intervalType..Poly..Linear,
a_C.intervalType..Poly..Quadratic,
a_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying.,
a_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying.,
a_scaledRunningTime,
v_Intercept,
v_C.blockType..Sum..S.Varying.,
v_C.intervalType..Poly..Linear,
v_C.intervalType..Poly..Quadratic,
v_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying.,
v_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier)%>%
mutate(a_Intercept = 0.5 * a_Intercept,
a_C.intervalType..Poly..Linear = 0.5 * a_C.intervalType..Poly..Linear,
a_C.intervalType..Poly..Quadratic = 0.5 * a_C.intervalType..Poly..Quadratic,
a_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying. = 0.5*a_C.intervalType..Poly..Linear.C.blockType..Sum..S.Varying.,
a_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying. = 0.5*a_C.intervalType..Poly..Quadratic.C.blockType..Sum..S.Varying.,
a_C.blockType..Sum..S.Fixed. = 0.5 * a_C.blockType..Sum..S.Varying.,
a_scaledRunningTime = 0.5 * a_scaledRunningTime)
summary <- test.params(summary)
summary$CI_upper <- round(summary$CI_upper,2)
summary$CI_lower <- round(summary$CI_lower,2)
summary$CI <- paste0(summary$CI_lower,", ",summary$CI_upper)
summary$Mean <- round(summary$Mean,2)
summary$pvalue <- round(summary$pvalue,2)
kable(summary)
```
## Each condition
### Bar plot
```{r, message=FALSE}
### Separate conditions ####
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Speed_Fixed',
'v_Acc_Fixed',
'v_SpeedAcc_Fixed',
'v_Speed_Varying',
'v_Acc_Varying',
'v_SpeedAcc_Varying'))
threshold<- output %>% filter(parameter %in% c('a_Speed_Fixed',
'a_Acc_Fixed',
'a_SpeedAcc_Fixed',
'a_Speed_Varying',
'a_Acc_Varying',
'a_SpeedAcc_Varying'))
NDT<- output %>% filter(parameter %in% c('t_Speed',
't_Acc',
't_SpeedAcc'))
# VA
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(va$fixed)
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
# Plot
p<-ggplot(va,aes(x=parameter, y=Mean,fill=fixed)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6),color=NA) +
geom_errorbar(width=.1, size=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower,ymax=CI_upper)) + ylab('Estimate') +
facet_wrap(vars(factor)) +
scale_fill_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
scale_x_discrete(expand = c(0.3,0.3),limits = c("Drift Rate","Threshold"))+
scale_y_continuous(expand = c(0,0),limits = c(0,4)) +
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.70, 0.99),
legend.background = element_rect(fill = "transparent", color = NA))
p
# ggsave("Mixed_ae_only_VAT.tiff", units="in", width=15, height=4, dpi=400, compression = 'lzw')
kable(va)
mean(traces$t)
```
### Points in 2D
```{r, message=FALSE}
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Speed_Fixed',
'v_Acc_Fixed',
'v_SpeedAcc_Fixed',
'v_Speed_Varying',
'v_Acc_Varying',
'v_SpeedAcc_Varying'))
threshold<- output %>% filter(parameter %in% c('a_Speed_Fixed',
'a_Acc_Fixed',
'a_SpeedAcc_Fixed',
'a_Speed_Varying',
'a_Acc_Varying',
'a_SpeedAcc_Varying'))
# VA
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(va$fixed)
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
va$parameter = c("Drift","Drift","Drift","Drift","Drift","Drift","Threshold","Threshold","Threshold","Threshold","Threshold","Threshold")
# Long to wide
data = pivot_wider(data = va,
id_cols = c(factor,fixed),
names_from = parameter,
values_from = c("Mean","CI_lower","CI_upper"))
data$factor = c("Speed","Speed", "Accuracy","Accuracy","Speed & Accuracy","Speed & Accuracy" )
# data$factor = paste(data$factor,data$fixed,sep=" - ")
data$factor = factor(data$factor, levels = c("Speed", "Speed & Accuracy", "Accuracy"))
levels(data$factor) = c("Speed","Speed & Accuracy" , "Accuracy")
# data$factor = c("Speed", "Accuracy","Speed & Accuracy" )
p<-ggplot(data,aes(x=Mean_Drift, y=Mean_Threshold,colour = factor,shape = fixed)) +
geom_point(size=6) +
# geom_line(aes(group=fixed),linewidth=1, color="black")+
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(xmin=CI_lower_Drift,xmax=CI_upper_Drift,linetype=fixed)) +
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower_Threshold,ymax=CI_upper_Threshold,linetype=fixed))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
ylab("Threshold") +
xlab("Drift Rate") +
scale_x_continuous(limits = c(2.2,4.2))+
scale_y_continuous(limits = c(0.5,1.3))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none")
p
Fig3.DDM = p
```
##### Accuracy vs. Speed
# Drift - A-S fixed
Diff_Fix = traces$v_Acc_Fixed - traces$v_Speed_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed Drift")
# Drift - A-S varying
Diff_Var = traces$v_Acc_Varying - traces$v_Speed_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Drift")
# Drift - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Drift")
# Threshold - A-S fixed
Diff_Fix = traces$a_Acc_Fixed - traces$a_Speed_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed Threshold")
# Threshold - A-S varying
Diff_Var = traces$a_Acc_Varying - traces$a_Speed_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Threshold")
# Threshold - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Threshold")
# Distance
Distance_Fixed_A_S = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Acc_Fixed - traces$a_Speed_Fixed)**2)
Distance_Varying_A_S = sqrt((traces$v_Acc_Varying - traces$v_Speed_Varying)**2 + (traces$a_Acc_Varying - traces$a_Speed_Varying)**2)
Distance_Diff_A_S = Distance_Fixed_A_S - Distance_Varying_A_S
kable(test.params(as.data.frame(Distance_Diff_A_S)))
# Normalized distance
# Threshold & Drift overall min & max
a_max = max(rbind(traces$a_Acc_Fixed,
traces$a_Acc_Varying,
traces$a_Speed_Fixed,
traces$a_Speed_Varying,
traces$a_SpeedAcc_Fixed,
traces$a_SpeedAcc_Varying))
a_min = min(rbind(traces$a_Acc_Fixed,
traces$a_Acc_Varying,
traces$a_Speed_Fixed,
traces$a_Speed_Varying,
traces$a_SpeedAcc_Fixed,
traces$a_SpeedAcc_Varying))
v_max = max(rbind(traces$v_Acc_Fixed,
traces$v_Acc_Varying,
traces$v_Speed_Fixed,
traces$v_Speed_Varying,
traces$v_SpeedAcc_Fixed,
traces$v_SpeedAcc_Varying))
v_min = min(rbind(traces$v_Acc_Fixed,
traces$v_Acc_Varying,
traces$v_Speed_Fixed,
traces$v_Speed_Varying,
traces$v_SpeedAcc_Fixed,
traces$v_SpeedAcc_Varying))
# Normalization
v_rangeNorm <- function(x){
(x-v_min)/(v_max-v_min)
}
a_rangeNorm <- function(x){
(x-a_min)/(a_max-a_min)
}
Distance_Fixed_A_S = sqrt((v_rangeNorm(traces$v_Acc_Fixed) - v_rangeNorm(traces$v_Speed_Fixed))**2 + (a_rangeNorm(traces$a_Acc_Fixed) - a_rangeNorm(traces$a_Speed_Fixed))**2)
Distance_Varying_A_S = sqrt((v_rangeNorm(traces$v_Acc_Varying) - v_rangeNorm( traces$v_Speed_Varying))**2 + (a_rangeNorm(traces$a_Acc_Varying) - a_rangeNorm(traces$a_Speed_Varying))**2)
Distance_Diff_A_S = Distance_Fixed_A_S - Distance_Varying_A_S
kable(test.params(as.data.frame(Distance_Diff_A_S)))
##### Accuracy vs. Speed Accuracy
# Drift - A-S fixed
Diff_Fix = traces$v_Acc_Fixed - traces$v_SpeedAcc_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Fixed Drift")
# Drift - A-S varying
Diff_Var = traces$v_Acc_Varying - traces$v_SpeedAcc_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Varying Drift")
# Drift - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Varying Drift")
# Threshold - A-S fixed
Diff_Fix = traces$a_Acc_Fixed - traces$a_SpeedAcc_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Fixed Threshold")
# Threshold - A-S varying
Diff_Var = traces$a_Acc_Varying - traces$a_SpeedAcc_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Varying Threshold")
# Threshold - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. SpeedAcc Varying Threshold")
# Distance
Distance_Fixed_A_SA = sqrt((traces$v_Acc_Fixed - traces$v_SpeedAcc_Fixed)**2 + (traces$a_Acc_Fixed - traces$a_SpeedAcc_Fixed)**2)
Distance_Varying_A_SA = sqrt((traces$v_Acc_Varying - traces$v_SpeedAcc_Varying)**2 + (traces$a_Acc_Varying - traces$a_SpeedAcc_Varying)**2)
Distance_Diff_A_SA = Distance_Fixed_A_SA - Distance_Varying_A_SA
kable(test.params(as.data.frame(Distance_Diff_A_SA)))
# Normalized Distance
Distance_Fixed_A_SA = sqrt((v_rangeNorm(traces$v_Acc_Fixed) - v_rangeNorm(traces$v_SpeedAcc_Fixed))**2 + (a_rangeNorm(traces$a_Acc_Fixed) - a_rangeNorm(traces$a_SpeedAcc_Fixed))**2)
Distance_Varying_A_SA = sqrt((v_rangeNorm(traces$v_Acc_Varying) - v_rangeNorm(traces$v_SpeedAcc_Varying))**2 + (a_rangeNorm(traces$a_Acc_Varying) - a_rangeNorm(traces$a_SpeedAcc_Varying))**2)
Distance_Diff_A_SA = Distance_Fixed_A_SA - Distance_Varying_A_SA
kable(test.params(as.data.frame(Distance_Diff_A_SA)))
##### Speed/Accuracy vs. Speed
# Drift - A-S fixed
Diff_Fix = traces$v_SpeedAcc_Fixed - traces$v_Speed_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Fixed Drift")
# Drift - A-S varying
Diff_Var = traces$v_SpeedAcc_Varying - traces$v_Speed_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Varying Drift")
# Drift - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Varying Drift")
# Threshold - A-S fixed
Diff_Fix = traces$a_SpeedAcc_Fixed - traces$a_Speed_Fixed
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Fixed Threshold")
# Threshold - A-S varying
Diff_Var = traces$a_SpeedAcc_Varying - traces$a_Speed_Varying
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Varying Threshold")
# Threshold - Cost
Diff = Diff_Fix - Diff_Var
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="SpeedAcc vs. Speed Varying Threshold")
# Distance
Distance_Fixed_SA_S = sqrt((traces$v_SpeedAcc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_SpeedAcc_Fixed - traces$a_Speed_Fixed)**2)
Distance_Varying_SA_S = sqrt((traces$v_SpeedAcc_Varying - traces$v_Speed_Varying)**2 + (traces$a_SpeedAcc_Varying - traces$a_Speed_Varying)**2)
Distance_Diff_SA_S = Distance_Fixed_SA_S - Distance_Varying_SA_S
kable(test.params(as.data.frame(Distance_Diff_SA_S)))
# Normalized Distance
Distance_Fixed_SA_S = sqrt((v_rangeNorm(traces$v_SpeedAcc_Fixed) - v_rangeNorm(traces$v_Speed_Fixed))**2 + (a_rangeNorm(traces$a_SpeedAcc_Fixed) - a_rangeNorm(traces$a_Speed_Fixed))**2)
Distance_Varying_SA_S = sqrt((v_rangeNorm(traces$v_SpeedAcc_Varying) - v_rangeNorm(traces$v_Speed_Varying))**2 + (a_rangeNorm(traces$a_SpeedAcc_Varying) - a_rangeNorm(traces$a_Speed_Varying))**2)
Distance_Diff_SA_S = Distance_Fixed_SA_S - Distance_Varying_SA_S
kable(test.params(as.data.frame(Distance_Diff_SA_S)))
setwd("C:/Users/igrahek/Dropbox (Brown)/CLPS-ShenhavLab/Experiments/CAC/CAC_Paper_Repo_2023/ControlAdjustmentCosts/Analyses/Experiment3/ddm")
# test
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(grDevices)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
df.ppc <- fread('output/Mixed/ae_only/modelMixed3/modelMixed3_simData.csv') %>%
mutate(simResponse=rt_sampled>0,
Response=rt>0,
rt_unsigned = abs(rt),
rt_sampled_unsigned = abs(rt_sampled))
df.ppc.sim <- df.ppc %>% filter(sample==0,rt_sampled_unsigned<=3)
df.ppc.data <- df.ppc %>% filter(sample==0,rt_unsigned<=3)
ratio.true <- sum(!df.ppc.data$Response)/sum(df.ppc.data$Response)
ratio.simu <- sum(!df.ppc.sim$simResponse)/sum(df.ppc.sim$simResponse)
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType,isi)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
FigS1_C = p
FigS1_C
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType),rows=vars(blockType,isi)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_C = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_C.pdf",height=20,width=10)
p = cowplot::plot_grid(FigS1_C,
nrow = 1,
ncol = 1)
p
dev.off()
