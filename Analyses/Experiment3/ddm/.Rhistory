}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
df.ppc <- fread('output/Mixed/ae_only/modelMixed3/modelMixed3_simData.csv') %>%
mutate(simResponse=rt_sampled>0,
Response=rt>0,
rt_unsigned = abs(rt),
rt_sampled_unsigned = abs(rt_sampled))
df.ppc.sim <- df.ppc %>% filter(sample==0,rt_sampled_unsigned<=3)
df.ppc.data <- df.ppc %>% filter(sample==0,rt_unsigned<=3)
ratio.true <- sum(!df.ppc.data$Response)/sum(df.ppc.data$Response)
ratio.simu <- sum(!df.ppc.sim$simResponse)/sum(df.ppc.sim$simResponse)
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType,isi)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
FigS1_C = p
FigS1_C
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType),rows=vars(blockType,isi)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_C = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_C.pdf",height=20,width=10)
p = cowplot::plot_grid(FigS1_C,
nrow = 1,
ncol = 1)
p
dev.off()
# test
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(grDevices)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
# traces<-traces %>% dplyr::select(t,
#                                  z_C.congruency..Sum..S.incongruent.,
#                                  p_outlier)
#
# summary = test.params(traces)
#
traces = read.csv('output/Mixed/ae_only/modelMixed3/modelMixed3_traces.csv')
# Drift rates
traces_drift = traces %>% dplyr::select(v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Varying.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.,
v_C.isi..Sum..S.ISI_250.,
v_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.,
v_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.)
traces_drift$v_Intercept = rep(mean(traces_drift$v_Intercept), length(traces_drift$v_Intercept))
traces.mat = t(data.matrix(traces_drift))
coding.intervalType = cbind(c(1,1),contr.sum(2))
coding.blockType = cbind(c(1,1),contr.sum(2))
coding.isi = cbind(c(1,1),contr.sum(2))
coding.total = coding.isi %x% coding.blockType %x% coding.intervalType
conditions_drift = as.data.frame(t(coding.total %*% traces.mat))
colnames(conditions_drift) = c("Drift_Speed_Varying_ISI250",
"Drift_Accuracy_Varying_ISI250",
"Drift_Speed_Fixed_ISI250",
"Drift_Accuracy_Fixed_ISI250",
"Drift_Speed_Varying_ISI1000",
"Drift_Accuracy_Varying_ISI1000",
"Drift_Speed_Fixed_ISI1000",
"Drift_Accuracy_Fixed_ISI1000")
# Calculate the difference
conditions_drift$Drift_Varying_ISI250 = conditions_drift$Drift_Accuracy_Varying_ISI250 - conditions_drift$Drift_Speed_Varying_ISI250
conditions_drift$Drift_Varying_ISI1000 = conditions_drift$Drift_Accuracy_Varying_ISI1000 - conditions_drift$Drift_Speed_Varying_ISI1000
conditions_drift$Drift_Fixed_ISI250 = conditions_drift$Drift_Accuracy_Fixed_ISI250 - conditions_drift$Drift_Speed_Fixed_ISI250
conditions_drift$Drift_Fixed_ISI1000 = conditions_drift$Drift_Accuracy_Fixed_ISI1000 - conditions_drift$Drift_Speed_Fixed_ISI1000
# Thresholds
traces_threshold = traces %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Varying.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.,
a_C.isi..Sum..S.ISI_250.,
a_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.,
a_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.)%>%
mutate(a_Intercept=0.5*a_Intercept,
a_C.intervalType..Sum..S.Speed.=0.5*a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Varying.=0.5*a_C.blockType..Sum..S.Varying.,
a_C.isi..Sum..S.ISI_250.=0.5*a_C.isi..Sum..S.ISI_250.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.=0.5*a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.,
a_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.=0.5*a_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.,
a_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.=0.5*a_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.=0.5*a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.)
traces_threshold$a_Intercept = rep(mean(traces_threshold$a_Intercept), length(traces_threshold$a_Intercept))
traces.mat = t(data.matrix(traces_threshold))
coding.intervalType = cbind(c(1,1),contr.sum(2))
coding.blockType = cbind(c(1,1),contr.sum(2))
coding.isi = cbind(c(1,1),contr.sum(2))
coding.total = coding.isi %x% coding.blockType %x% coding.intervalType
conditions_threshold = as.data.frame(t(coding.total %*% traces.mat))
colnames(conditions_threshold) = c("Threshold_Speed_Varying_ISI250",
"Threshold_Accuracy_Varying_ISI250",
"Threshold_Speed_Fixed_ISI250",
"Threshold_Accuracy_Fixed_ISI250",
"Threshold_Speed_Varying_ISI1000",
"Threshold_Accuracy_Varying_ISI1000",
"Threshold_Speed_Fixed_ISI1000",
"Threshold_Accuracy_Fixed_ISI1000")
# Calculate the difference
conditions_threshold$Threshold_Varying_ISI250 = conditions_threshold$Threshold_Accuracy_Varying_ISI250 - conditions_threshold$Threshold_Speed_Varying_ISI250
conditions_threshold$Threshold_Varying_ISI1000 = conditions_threshold$Threshold_Accuracy_Varying_ISI1000 - conditions_threshold$Threshold_Speed_Varying_ISI1000
conditions_threshold$Threshold_Fixed_ISI250 = conditions_threshold$Threshold_Accuracy_Fixed_ISI250 - conditions_threshold$Threshold_Speed_Fixed_ISI250
conditions_threshold$Threshold_Fixed_ISI1000 = conditions_threshold$Threshold_Accuracy_Fixed_ISI1000 - conditions_threshold$Threshold_Speed_Fixed_ISI1000
# Take only the difference variables
# conditions_threshold = conditions_threshold[,9:12]
# First column of condition.mu will be  1 1 1 which means all high, which means Speed, Varying, and ISI_250
# Second column will be -1 1 1 which means Accuracy, Varying, ISI_250
# f,  g,  h
# 1,  1,  1
#-1,  1,  1
# 1, -1,  1
#-1, -1,  1
# 1,  1, -1
#-1,  1, -1
# 1, -1, -1
#-1, -1, -1
print("NDT mean")
mean(traces$t)
# Drift - summarize and multiply to get the correct values (due to sum coding, we multiply by 2 each of the estimates)
# Main effects
traces_drift$v_C.intervalType..Sum..S.Speed. = traces_drift$v_C.intervalType..Sum..S.Speed.*2
traces_drift$v_C.blockType..Sum..S.Varying. = traces_drift$v_C.blockType..Sum..S.Varying.*2
traces_drift$v_C.isi..Sum..S.ISI_250. = traces_drift$v_C.isi..Sum..S.ISI_250.*2
# 2-way interactions
traces_drift$v_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. = traces_drift$v_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. * 4
traces_drift$v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying. = traces_drift$v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.*4
traces_drift$v_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250. = traces_drift$v_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.*4
# 3-way interaction
traces_drift$v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. = traces_drift$v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.*8
# Summarize
drift.rate = test.params(traces_drift)
# Print the summary
kable(drift.rate,caption="Drift rate parameter estimates")
# Threshold - summarize and multiply to get the correct values (due to sum coding, we multiply by 2 each of the estimates)
# Main effects
traces_threshold$a_C.intervalType..Sum..S.Speed. = traces_threshold$a_C.intervalType..Sum..S.Speed.*2
traces_threshold$a_C.blockType..Sum..S.Varying. = traces_threshold$a_C.blockType..Sum..S.Varying.*2
traces_threshold$a_C.isi..Sum..S.ISI_250. = traces_threshold$a_C.isi..Sum..S.ISI_250.*2
# 2-way interactions
traces_threshold$a_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. = traces_threshold$a_C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. * 4
traces_threshold$a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying. = traces_threshold$a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying.*4
traces_threshold$a_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250. = traces_threshold$a_C.intervalType..Sum..S.Speed..C.isi..Sum..S.ISI_250.*4
# 3-way interaction
traces_threshold$a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250. = traces_threshold$a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Varying..C.isi..Sum..S.ISI_250.*8
# Summarize
threshold = test.params(traces_threshold)
# Print the summary
kable(threshold,caption="Threshold parameter estimates")
summary <- threshold
summary$CI_upper <- round(summary$CI_upper,2)
summary$CI_lower <- round(summary$CI_lower,2)
summary$CI <- paste0(summary$CI_lower,", ",summary$CI_upper)
summary$Mean <- round(summary$Mean,2)
summary$pvalue <- round(summary$pvalue,2)
kable(summary)
drift.rate <- test.params(conditions_drift)
# Take only the difference variables
drift.rate = drift.rate[9:12,]
threshold <- test.params(conditions_threshold)
# Take only the difference variables
threshold = threshold[9:12,]
# NDT<- output %>% filter(parameter %in% c('t_Speed',
#                                          't_Acc'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','fixed','isi'),'_')
va = as.data.frame(va)
va$parameter = as.factor(va$parameter)
va$fixed = as.factor(va$fixed)
va$isi = as.factor(va$isi)
va$isi = ifelse(va$isi=="ISI250", "250", "1000")
va$isi = factor(va$isi,levels=c("250","1000"))
##### 250ms
# Drift - A-S fixed
Diff_Fix = conditions_drift$Drift_Accuracy_Fixed_ISI250 - conditions_drift$Drift_Speed_Fixed_ISI250
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed 250ms Drift")
# Drift - A-S varying
Diff_Var = conditions_drift$Drift_Accuracy_Varying_ISI250 - conditions_drift$Drift_Speed_Varying_ISI250
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying 250ms Drift")
# Drift - Cost
Diff_250 = Diff_Fix - Diff_Var
colnames(Diff_250) = "Diff_250"
h = (hypothesis(Diff_250,"Diff_250<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Drift")
# Threshold - A-S fixed
Diff_Fix = conditions_threshold$Threshold_Accuracy_Fixed_ISI250 - conditions_threshold$Threshold_Speed_Fixed_ISI250
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed 250ms Threshold")
# Threshold - A-S varying
Diff_Var = conditions_threshold$Threshold_Accuracy_Varying_ISI250 - conditions_threshold$Threshold_Speed_Varying_ISI250
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying 250ms Threshold")
# Threshold - Cost
Diff_250 = Diff_Fix - Diff_Var
colnames(Diff_250) = "Diff_250"
h = (hypothesis(Diff_250,"Diff_250<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Threshold")
# Distance
Distance_Fixed_250 = sqrt((conditions_drift$Drift_Accuracy_Fixed_ISI250 - conditions_drift$Drift_Speed_Fixed_ISI250)**2 + (conditions_threshold$Threshold_Accuracy_Fixed_ISI250 - conditions_threshold$Threshold_Speed_Fixed_ISI250)**2)
Distance_Varying_250 = sqrt((conditions_drift$Drift_Accuracy_Varying_ISI250 - conditions_drift$Drift_Speed_Varying_ISI250)**2 + (conditions_threshold$Threshold_Accuracy_Varying_ISI250 - conditions_threshold$Threshold_Speed_Varying_ISI250)**2)
Distance_Diff_250 = Distance_Fixed_250 - Distance_Varying_250
kable(test.params(as.data.frame(Distance_Diff_250)))
# Normalized distance
# Threshold & Drift overall min & max
a_max = max(rbind(conditions_threshold$Threshold_Accuracy_Fixed_ISI250,
conditions_threshold$Threshold_Accuracy_Varying_ISI250,
conditions_threshold$Threshold_Accuracy_Fixed_ISI1000,
conditions_threshold$Threshold_Accuracy_Varying_ISI1000,
conditions_threshold$Threshold_Speed_Fixed_ISI250,
conditions_threshold$Threshold_Speed_Varying_ISI250,
conditions_threshold$Threshold_Speed_Fixed_ISI1000,
conditions_threshold$Threshold_Speed_Varying_ISI1000))
a_min = min(rbind(conditions_threshold$Threshold_Accuracy_Fixed_ISI250,
conditions_threshold$Threshold_Accuracy_Varying_ISI250,
conditions_threshold$Threshold_Accuracy_Fixed_ISI1000,
conditions_threshold$Threshold_Accuracy_Varying_ISI1000,
conditions_threshold$Threshold_Speed_Fixed_ISI250,
conditions_threshold$Threshold_Speed_Varying_ISI250,
conditions_threshold$Threshold_Speed_Fixed_ISI1000,
conditions_threshold$Threshold_Speed_Varying_ISI1000))
v_max = max(rbind(conditions_drift$Drift_Accuracy_Fixed_ISI250,
conditions_drift$Drift_Accuracy_Varying_ISI250,
conditions_drift$Drift_Accuracy_Fixed_ISI1000,
conditions_drift$Drift_Accuracy_Varying_ISI1000,
conditions_drift$Drift_Speed_Fixed_ISI250,
conditions_drift$Drift_Speed_Varying_ISI250,
conditions_drift$Drift_Speed_Fixed_ISI1000,
conditions_drift$Drift_Speed_Varying_ISI1000))
v_min = min(rbind(conditions_drift$Drift_Accuracy_Fixed_ISI250,
conditions_drift$Drift_Accuracy_Varying_ISI250,
conditions_drift$Drift_Accuracy_Fixed_ISI1000,
conditions_drift$Drift_Accuracy_Varying_ISI1000,
conditions_drift$Drift_Speed_Fixed_ISI250,
conditions_drift$Drift_Speed_Varying_ISI250,
conditions_drift$Drift_Speed_Fixed_ISI1000,
conditions_drift$Drift_Speed_Varying_ISI1000))
# Normalization
v_rangeNorm <- function(x){
(x-v_min)/(v_max-v_min)
}
a_rangeNorm <- function(x){
(x-a_min)/(a_max-a_min)
}
Distance_Fixed_250 = sqrt((v_rangeNorm(conditions_drift$Drift_Accuracy_Fixed_ISI250) - v_rangeNorm(conditions_drift$Drift_Speed_Fixed_ISI250))**2 + (a_rangeNorm(conditions_threshold$Threshold_Accuracy_Fixed_ISI250) - a_rangeNorm(conditions_threshold$Threshold_Speed_Fixed_ISI250))**2)
Distance_Varying_250 = sqrt((v_rangeNorm(conditions_drift$Drift_Accuracy_Varying_ISI250) - v_rangeNorm(conditions_drift$Drift_Speed_Varying_ISI250))**2 + (a_rangeNorm(conditions_threshold$Threshold_Accuracy_Varying_ISI250) - a_rangeNorm(conditions_threshold$Threshold_Speed_Varying_ISI250))**2)
Distance_Diff_250 = Distance_Fixed_250 - Distance_Varying_250
kable(test.params(as.data.frame(Distance_Diff_250)))
##### 1000ms
# Drift - A-S fixed
Diff_Fix = conditions_drift$Drift_Accuracy_Fixed_ISI1000 - conditions_drift$Drift_Speed_Fixed_ISI1000
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed 1000ms Drift")
# Drift - A-S varying
Diff_Var = conditions_drift$Drift_Accuracy_Varying_ISI1000 - conditions_drift$Drift_Speed_Varying_ISI1000
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying 1000ms Drift")
# Drift - Cost
Diff_1000 = Diff_Fix - Diff_Var
colnames(Diff_1000) = "Diff_1000"
h = (hypothesis(Diff_1000,"Diff_1000<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Drift")
# Threshold - A-S fixed
Diff_Fix = conditions_threshold$Threshold_Accuracy_Fixed_ISI1000 - conditions_threshold$Threshold_Speed_Fixed_ISI1000
Diff_Fix = as.data.frame(Diff_Fix)
h = (hypothesis(Diff_Fix,"Diff_Fix<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Fixed 1000ms Threshold")
# Threshold - A-S varying
Diff_Var = conditions_threshold$Threshold_Accuracy_Varying_ISI1000 - conditions_threshold$Threshold_Speed_Varying_ISI1000
Diff_Var = as.data.frame(Diff_Var)
h = (hypothesis(Diff_Var,"Diff_Var<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying 1000ms Threshold")
# Threshold - Cost
Diff_1000 = Diff_Fix - Diff_Var
colnames(Diff_1000) = "Diff_1000"
h = (hypothesis(Diff_1000,"Diff_1000<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Threshold")
# Threshold - Cost
Diff = Diff_250 - Diff_1000
colnames(Diff) = "Diff"
h = (hypothesis(Diff,"Diff<0"))
kable(as.data.frame(h$hypothesis),caption="Accuracy vs. Speed Varying Threshold")
# Distance
Distance_Fixed_1000 = sqrt((conditions_drift$Drift_Accuracy_Fixed_ISI1000 - conditions_drift$Drift_Speed_Fixed_ISI1000)**2 + (conditions_threshold$Threshold_Accuracy_Fixed_ISI1000 - conditions_threshold$Threshold_Speed_Fixed_ISI1000)**2)
Distance_Varying_1000 = sqrt((conditions_drift$Drift_Accuracy_Varying_ISI1000 - conditions_drift$Drift_Speed_Varying_ISI1000)**2 + (conditions_threshold$Threshold_Accuracy_Varying_ISI1000 - conditions_threshold$Threshold_Speed_Varying_ISI1000)**2)
Distance_Diff_1000 = Distance_Fixed_1000 - Distance_Varying_1000
kable(test.params(as.data.frame(Distance_Diff_1000)))
# Normalized distance
Distance_Fixed_1000 = sqrt((v_rangeNorm(conditions_drift$Drift_Accuracy_Fixed_ISI1000) - v_rangeNorm(conditions_drift$Drift_Speed_Fixed_ISI1000))**2 + (a_rangeNorm(conditions_threshold$Threshold_Accuracy_Fixed_ISI1000) - a_rangeNorm(conditions_threshold$Threshold_Speed_Fixed_ISI1000))**2)
Distance_Varying_1000 = sqrt((v_rangeNorm(conditions_drift$Drift_Accuracy_Varying_ISI1000) - v_rangeNorm(conditions_drift$Drift_Speed_Varying_ISI1000))**2 + (a_rangeNorm(conditions_threshold$Threshold_Accuracy_Varying_ISI1000) - a_rangeNorm(conditions_threshold$Threshold_Speed_Varying_ISI1000))**2)
Distance_Diff_1000 = Distance_Fixed_1000 - Distance_Varying_1000
kable(test.params(as.data.frame(Distance_Diff_1000)))
kable(test.params(as.data.frame(Distance_Diff_250)))
X = Distance_Diff_250 - Distance_Diff_1000
kable(test.params(as.data.frame(X)))
