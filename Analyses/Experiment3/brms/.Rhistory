scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.78,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
?scale_y_continuous
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.78,1),breaks = 0.1)+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.78,1),nbreaks = 3)+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.78,1),breaks = c(0.7,0.8,0.9,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.73,1),breaks = c(0.7,0.8,0.9,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.76,1),breaks = c(0.7,0.8,0.9,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig4.Acc = p
pdf(file="../../../Manuscript/figures/Figure_4_behavior.pdf",height=6,width=18)
p = cowplot::plot_grid(Fig4.RT,
Fig4.Acc,
nrow = 1)
p
dev.off()
# clear the environment
rm(list=ls())
# set seed
set.seed(42)
#load packages and install them if they're not installed. the pacman package will
#automatically check for the requested packages and download & install them if they are not on the computer.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(brms,here,broom,knitr,tidyverse,plyr,cowplot,emmeans,tidybayes,grDevices,viridis,MASS)
# Define the summary posterior function
summarize_posterior <- function(model,variable) {
post = posterior_samples(model, "^b")
ggplot(post,aes_string(x=paste0("`",variable,"`"))) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(variable,"p<0 = ",length(subset(post[[variable]],post[[variable]]<0))/length(post[[variable]]))) +
theme_classic()
}
# Define the difference summary posterior function
summarize_difference_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
# Define the difference summary posterior function
summarize_one_posterior <- function(V1,effect) {
post = as.data.frame(V1)
ggplot(data=post,aes(x=`V1`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1`))) +
theme_classic()
}
# Define calculate the posterior probabilities function
posterior_probabilities <- function(model) {
parameter_names = rownames(summary(model)[["fixed"]])
post_prob = rep(0,length(parameter_names))
for (i in 1:length(parameter_names)){
t = hypothesis(model,paste0(parameter_names[i],"<0"))
post_prob[i] = t$hypothesis$Post.Prob
}
return(post_prob)
}
model = readRDS("Cluster/output/model.RT.rds")
# Extract posteriors
posterior = as_draws_df(model, variable = c("b_Intercept",
"b_intervalTypeSpeed_min_Accuracy",
"b_blockTypeVarying_min_Fixed",
"b_intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed",
"b_isi1000_min_250",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy",
"b_isi1000_min_250:blockTypeVarying_min_Fixed",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed"))
# Remove the non-necessary variables
posterior = posterior[,1:8]
# Set the intercept to the mean value
posterior$b_Intercept = mean(posterior$b_Intercept)
# Transform the posteriors
Speed_min_Accuracy = cbind(c(1,1),contr.sdif(2))
Varying_min_Fixed = cbind(c(1,1),contr.sdif(2))
SOA_250_min_1000 = cbind(c(1,1),contr.sdif(2))
coding.total = as.matrix(Speed_min_Accuracy) %x% as.matrix(Varying_min_Fixed) %x% as.matrix(SOA_250_min_1000)
# Create predictions from all the posterior samples
results =  as.data.frame(t(coding.total %*% t(posterior)))
colnames(results) = c("Speed_Varying_SOA1000",
"Accuracy_Varying_SOA1000",
"Speed_Fixed_SOA1000",
"Accuracy_Fixed_SOA1000",
"Speed_Varying_SOA250",
"Accuracy_Varying_SOA250",
"Speed_Fixed_SOA250",
"Accuracy_Fixed_SOA250")
results = as.data.frame(posterior_summary(results))
results$factor = rownames(results)
results = results %>% separate(factor,c('Interval Type','Block Type',"SOA"),'_')
# Reorder the factor levels
results$`Interval Type` = factor(results$`Interval Type`, levels = c("Speed", "Accuracy"))
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Reaction time (ms)")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(670,810))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig5.RT = p
# Extract posteriors
posterior = as_draws_df(model, variable = c("b_Intercept",
"b_intervalTypeSpeed_min_Accuracy",
"b_blockTypeVarying_min_Fixed",
"b_intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed",
"b_isi1000_min_250",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy",
"b_isi1000_min_250:blockTypeVarying_min_Fixed",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed"))
# Remove the non-necessary variables
posterior = posterior[,1:8]
# Set the intercept to the mean value
posterior$b_Intercept = mean(posterior$b_Intercept)
# Transform the posteriors
Speed_min_Accuracy = cbind(c(1,1),contr.sdif(2))
Varying_min_Fixed = cbind(c(1,1),contr.sdif(2))
SOA_250_min_1000 = cbind(c(1,1),contr.sdif(2))
coding.total = as.matrix(Speed_min_Accuracy) %x% as.matrix(Varying_min_Fixed) %x% as.matrix(SOA_250_min_1000)
# Create predictions from all the posterior samples
results =  as.data.frame(t(coding.total %*% t(posterior)))
colnames(results) = c("Speed_Varying_SOA1000",
"Accuracy_Varying_SOA1000",
"Speed_Fixed_SOA1000",
"Accuracy_Fixed_SOA1000",
"Speed_Varying_SOA250",
"Accuracy_Varying_SOA250",
"Speed_Fixed_SOA250",
"Accuracy_Fixed_SOA250")
results = as.data.frame(posterior_summary(results))
results$factor = rownames(results)
results = results %>% separate(factor,c('Interval Type','Block Type',"SOA"),'_')
# Reorder the factor levels
results$`Interval Type` = factor(results$`Interval Type`, levels = c("Speed", "Accuracy"))
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Reaction time (ms)")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(670,810))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(linewidth=0.5),
axis.line.y.left=element_line(linewidth=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(linewidth=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig5.RT = p
# Extract posteriors
posterior = as_draws_df(model, variable = c("b_Intercept",
"b_intervalTypeSpeed_min_Accuracy",
"b_blockTypeVarying_min_Fixed",
"b_intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed",
"b_isi1000_min_250",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy",
"b_isi1000_min_250:blockTypeVarying_min_Fixed",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed"))
# Remove the non-necessary variables
posterior = posterior[,1:8]
# Set the intercept to the mean value
posterior$b_Intercept = mean(posterior$b_Intercept)
# Transform the posteriors
Speed_min_Accuracy = cbind(c(1,1),contr.sdif(2))
Varying_min_Fixed = cbind(c(1,1),contr.sdif(2))
SOA_250_min_1000 = cbind(c(1,1),contr.sdif(2))
coding.total = as.matrix(Speed_min_Accuracy) %x% as.matrix(Varying_min_Fixed) %x% as.matrix(SOA_250_min_1000)
# Create predictions from all the posterior samples
results =  as.data.frame(t(coding.total %*% t(posterior)))
colnames(results) = c("Speed_Varying_SOA1000",
"Accuracy_Varying_SOA1000",
"Speed_Fixed_SOA1000",
"Accuracy_Fixed_SOA1000",
"Speed_Varying_SOA250",
"Accuracy_Varying_SOA250",
"Speed_Fixed_SOA250",
"Accuracy_Fixed_SOA250")
results = as.data.frame(posterior_summary(results))
results$factor = rownames(results)
results = results %>% separate(factor,c('Interval Type','Block Type',"SOA"),'_')
# Reorder the factor levels
results$`Interval Type` = factor(results$`Interval Type`, levels = c("Speed", "Accuracy"))
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Reaction time (ms)")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(670,810))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(linewidth=0.5),
axis.line.y.left=element_line(linewidth=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig5.RT = p
model = readRDS("Cluster/output/model.Acc.rds")
# Extract posteriors
posterior = as_draws_df(model, variable = c("b_Intercept",
"b_intervalTypeSpeed_min_Accuracy",
"b_blockTypeVarying_min_Fixed",
"b_intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed",
"b_isi1000_min_250",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy",
"b_isi1000_min_250:blockTypeVarying_min_Fixed",
"b_isi1000_min_250:intervalTypeSpeed_min_Accuracy:blockTypeVarying_min_Fixed"))
# Remove the non-necessary variables
posterior = posterior[,1:8]
# Set the intercept to the mean value
posterior$b_Intercept = mean(posterior$b_Intercept)
# Transform the posteriors
Speed_min_Accuracy = cbind(c(1,1),contr.sdif(2))
Varying_min_Fixed = cbind(c(1,1),contr.sdif(2))
SOA_250_min_1000 = cbind(c(1,1),contr.sdif(2))
coding.total = as.matrix(Speed_min_Accuracy) %x% as.matrix(Varying_min_Fixed) %x% as.matrix(SOA_250_min_1000)
# Create predictions from all the posterior samples
results =  as.data.frame(t(coding.total %*% t(posterior)))
colnames(results) = c("Speed_Varying_SOA1000",
"Accuracy_Varying_SOA1000",
"Speed_Fixed_SOA1000",
"Accuracy_Fixed_SOA1000",
"Speed_Varying_SOA250",
"Accuracy_Varying_SOA250",
"Speed_Fixed_SOA250",
"Accuracy_Fixed_SOA250")
results = as.data.frame(posterior_summary(results))
results$factor = rownames(results)
results = results %>% separate(factor,c('Interval Type','Block Type',"SOA"),'_')
# Reorder the factor levels
results$`Interval Type` = factor(results$`Interval Type`, levels = c("Speed", "Accuracy"))
# Turn logits into probabilities
results$Estimate = exp(results$Estimate)
results$Estimate = results$Estimate / (1 + results$Estimate)
results$Q2.5 = exp(results$Q2.5)
results$Q2.5 = results$Q2.5 / (1 + results$Q2.5)
results$Q97.5 = exp(results$Q97.5)
results$Q97.5 = results$Q97.5 / (1 + results$Q97.5)
# Plot
p = ggplot(results,aes(x=`SOA`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(override.aes=list(shape = 20)))+
ylab("Accuracy")+
xlab("SOA")+
scale_x_discrete(labels = c("250ms","1000ms"), expand=c(0.2,0.2))+
scale_y_continuous(limits = c(0.76,1),breaks = c(0.7,0.8,0.9,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(cols=vars(`Interval Type`))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(linewidth=0.5),
axis.line.y.left=element_line(linewidth=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig5.Acc = p
# pdf(file="../../../Manuscript/figures/Figure_Exp6_behavior.pdf",height=4,width=22)
#
# p = cowplot::plot_grid(Exp6.RT,
#                        Exp6.Acc,
#                        nrow = 1)
# p
# dev.off()
pdf(file="../../../Manuscript/figures/Figure_5_behavior.pdf",height=6,width=18)
p = cowplot::plot_grid(Fig5.RT,
Fig5.Acc,
nrow = 1)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_5_behavior.pdf",height=6,width=20)
p = cowplot::plot_grid(Fig5.RT,
Fig5.Acc,
nrow = 1)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_5_behavior.pdf",height=6,width=22)
p = cowplot::plot_grid(Fig5.RT,
Fig5.Acc,
nrow = 1)
p
dev.off()
