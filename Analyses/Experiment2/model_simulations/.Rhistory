legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
sim_data = read_csv("RCD_Sim_Exp1_ISI_250.csv")
# test
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(grDevices)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
sim_data = read_csv("RCD_Sim_Exp1_ISI_250.csv")
# test
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(grDevices)
library(tidyverse)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
Dark = rgb(0.5,0.5,0.5)
Light = rgb(0.8,0.8,0.8)
sim_data = read_csv("RCD_Sim_Exp1_ISI_250.csv")
View(sim_data)
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA250)[1]
colnames(sim_data_SOA250)[1] = parameter
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "parameter"
rep("a",5)
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = cbind(sim_data_SOA250,sim_data_SOA1000)
View(sim_data)
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = rbind(sim_data_SOA250,sim_data_SOA1000)
View(sim_data)
kable(sim_data)
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(soa), labeller = as_labeller(c('ISI250'="SOA = 250ms",'ISI1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('ISI250'="SOA = 250ms",'ISI1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
p
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(-SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
levels(sim_data$SOA)
sim_data$SOA = as.factor(sim_data$SOA)
levels(sim_data$SOA)
sim_data$SOA = as.factor(sim_data$SOA,levels=c(250,1000))
sim_data$SOA = as.factor(sim_data$SOA,levels=c("250","1000"))
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = rbind(sim_data_SOA250,sim_data_SOA1000)
sim_data$SOA = as.factor(sim_data$SOA,levels=c("250","1000"))
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = rbind(sim_data_SOA250,sim_data_SOA1000)
sim_data$SOA = as.factor(sim_data$SOA)
sim_data$SOA = relevel(sim_data$SOA, ref = "250")
levels(sim_data$SOA)
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
colnames(sim_data)
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = rbind(sim_data_SOA250,sim_data_SOA1000)
sim_data$SOA = as.factor(sim_data$SOA)
sim_data$SOA = relevel(sim_data$SOA, ref = "250")
colnames(sim_data)[2] = "Esimate"
kable(sim_data)
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=value,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=Estimate,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
# Import, tidy, and merge the simulations data
sim_data_SOA250 = read_csv("RCD_Sim_Exp1_ISI_250.csv")
colnames(sim_data_SOA250)[1] = "SOA"
sim_data_SOA250$SOA = rep("250",length(sim_data_SOA250$parameter))
sim_data_SOA1000 = read_csv("RCD_Sim_Exp1_ISI_1000.csv")
colnames(sim_data_SOA1000)[1] = "SOA"
sim_data_SOA1000$SOA = rep("1000",length(sim_data_SOA1000$parameter))
sim_data = rbind(sim_data_SOA250,sim_data_SOA1000)
sim_data$SOA = as.factor(sim_data$SOA)
sim_data$SOA = relevel(sim_data$SOA, ref = "250")
colnames(sim_data)[2] = "Estimate"
# Plot
p<-ggplot(sim_data,aes(x=parameter, y=Estimate,fill=block_type)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6)) +
facet_wrap(vars(SOA), labeller = as_labeller(c('250'="SOA = 250ms",'1000'="SOA = 1000ms")))+
ylim(-0.1,0.4)+
geom_hline(yintercept=0) +
scale_fill_manual(name="",values=c(Dark,Light)) +
scale_x_discrete(expand = c(0.3,0.3))+
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.85, 0.90),
legend.background = element_rect(fill = "transparent", color = NA))
p
Exp6.Sim = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_Exp6_simulations.pdf",height=4,width=8)
p = cowplot::plot_grid(Exp6.Sim,
nrow = 1)
p
dev.off()
