a_C.intervalType..Sum..S.Speed._Repeat = a_C.intervalType..Sum..S.Speed. - a_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.,
a_C.intervalType..Sum..S.Speed._Switch = a_C.intervalType..Sum..S.Speed. + a_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.,
v_Repeat = mean(v_Intercept) - v_C.Switch..Sum..S.Switch.,
v_Switch = mean(v_Intercept) + v_C.Switch..Sum..S.Switch.,
v_C.intervalType..Sum..S.Speed._Repeat = v_C.intervalType..Sum..S.Speed. - v_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.,
v_C.intervalType..Sum..S.Speed._Switch = v_C.intervalType..Sum..S.Speed. + v_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.)
traces<-traces %>% dplyr::mutate(a_Speed_Repeat = a_Repeat + a_C.intervalType..Sum..S.Speed._Repeat,
a_Speed_Switch = a_Switch + a_C.intervalType..Sum..S.Speed._Switch,
a_Acc_Repeat = a_Repeat - a_C.intervalType..Sum..S.Speed._Repeat,
a_Acc_Switch = a_Switch - a_C.intervalType..Sum..S.Speed._Switch,
v_Speed_Repeat = v_Repeat + v_C.intervalType..Sum..S.Speed._Repeat,
v_Speed_Switch = v_Switch + v_C.intervalType..Sum..S.Speed._Switch,
v_Acc_Repeat = v_Repeat - v_C.intervalType..Sum..S.Speed._Repeat,
v_Acc_Switch = v_Switch - v_C.intervalType..Sum..S.Speed._Switch)
traces<-traces %>% dplyr::mutate(a_Diff_Repeat = a_Acc_Repeat - a_Speed_Repeat,
a_Diff_Switch = a_Acc_Switch - a_Speed_Switch,
v_Diff_Repeat = v_Acc_Repeat - v_Speed_Repeat,
v_Diff_Switch = v_Acc_Switch - v_Speed_Switch)
```
## Parameter estimates
```{r, message=FALSE}
summary <- read.csv('output/Mixed/ae_only/modelMixed6/modelMixed6_traces.csv')
summary<-summary %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.Switch..Sum..S.Switch.,
a_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.Switch..Sum..S.Switch.,
v_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier)%>%
mutate(a_Intercept = 0.5 * a_Intercept,
a_C.intervalType..Sum..S.Speed. =  0.5 * a_C.intervalType..Sum..S.Speed.,
a_C.Switch..Sum..S.Switch. =  0.5 * a_C.Switch..Sum..S.Switch.,
a_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch. = 0.5 * a_C.intervalType..Sum..S.Speed..C.Switch..Sum..S.Switch.)
summary <- test.params(summary)
summary$CI_upper <- round(summary$CI_upper,2)
summary$CI_lower <- round(summary$CI_lower,2)
summary$CI <- paste0(summary$CI_lower,", ",summary$CI_upper)
summary$Mean <- round(summary$Mean,2)
summary$pvalue <- round(summary$pvalue,2)
kable(summary)
```
## Drift rate and threshold
### Bar plot
```{r, message=FALSE}
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Diff_Repeat',
'v_Diff_Switch'))
threshold<- output %>% filter(parameter %in% c('a_Diff_Repeat',
'a_Diff_Switch'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','switch'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$switch = as.factor(c("Repeat","Switch","Repeat","Switch"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
# Plot
p<-ggplot(va,aes(x=parameter, y=Mean,fill=switch)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6),color=NA) +
geom_errorbar(width=.1, size=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower,ymax=CI_upper)) + ylab('Estimate') +
scale_fill_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
scale_x_discrete(expand = c(0.3,0.3),limits = c("Drift Rate","Threshold"))+
scale_y_continuous(expand = c(0,0),limits = c(0,0.8)) +
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.70, 0.99),
legend.background = element_rect(fill = "transparent", color = NA))
p
kable(va)
# Differences Acc-Speed
summarize_posterior(traces$a_Diff_Repeat, traces$a_Diff_Switch, "Threshold - (Repeat:Acc-Speed) - (Switch: Acc-Speed)")
kable(test.params(as.data.frame(traces$a_Diff_Repeat - traces$a_Diff_Switch)), caption = "Threshold - (Repeat:Acc-Speed) - (Switch: Acc-Speed)")
summarize_posterior(traces$v_Diff_Repeat, traces$v_Diff_Switch, "Drift - (Repeat:Acc-Speed) - (Switch: Acc-Speed)")
kable(test.params(as.data.frame(traces$v_Diff_Repeat - traces$v_Diff_Switch)), caption = "Drift - (Repeat:Acc-Speed) - (Switch: Acc-Speed)")
# Main effect of the condition type
kable(test.params(as.data.frame(c(traces$a_Diff_Repeat,traces$a_Diff_Switch))))
kable(test.params(as.data.frame(c(traces$v_Diff_Repeat,traces$v_Diff_Switch))))
# Main effect of the block type
kable(test.params(as.data.frame(c(traces$a_Speed_Switch,traces$a_Acc_Switch) - c(traces$a_Speed_Repeat,traces$a_Acc_Repeat))))
kable(test.params(as.data.frame(c(traces$v_Speed_Switch,traces$v_Acc_Switch) - c(traces$v_Speed_Repeat,traces$v_Acc_Repeat))))
```
### Points in 2D (Fixed and Varying)
```{r, message=FALSE}
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Acc_Switch',
'v_Acc_Repeat',
'v_Speed_Switch',
'v_Speed_Repeat'))
threshold<- output %>% filter(parameter %in% c('a_Acc_Switch',
'a_Acc_Repeat',
'a_Speed_Switch',
'a_Speed_Repeat'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(c("Repeat","Switch","Repeat","Switch","Repeat","Switch","Repeat","Switch"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
data = va
data$parameter = c("Drift","Drift","Drift","Drift","Threshold","Threshold","Threshold","Threshold")
# Long to wide
data = pivot_wider(data = data,
id_cols = c(factor,fixed),
names_from = parameter,
values_from = c("Mean","CI_lower","CI_upper"))
data$factor = c("Speed", "Speed","Accuracy","Accuracy")
data$factor = factor(data$factor, levels = c("Speed", "Accuracy"))
levels(data$factor) = c("Speed", "Accuracy")
# data$factor = c("Speed", "Accuracy","Speed & Accuracy" )
p<-ggplot(data,aes(x=Mean_Drift, y=Mean_Threshold,colour = factor,shape=fixed)) +
geom_point(size=6) +
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(xmin=CI_lower_Drift,xmax=CI_upper_Drift,linetype=fixed)) +
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower_Threshold,ymax=CI_upper_Threshold,linetype=fixed))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
ylab("Threshold") +
xlab("Drift Rate") +
scale_x_continuous(limits = c(2,3.3))+
scale_y_continuous(limits = c(0.5,1.4))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig2.DDM_Switch = p
```
# Drift
Acc_min_Speed_Fixed_V = traces$v_Acc_Fixed - traces$v_Speed_Fixed
drift.rate
colnames(traces)
traces$v_Acc_Fixed
Acc_min_Speed_Fixed_V
# Drift
Acc_min_Speed_Repeat_V = traces$v_Acc_Repeat - traces$v_Speed_Repeat
kable(test.params(as.data.frame(Acc_min_Speed_Repeat_V)))
Acc_min_Speed_Switch_V = traces$v_Acc_Switch - traces$v_Speed_Switch
kable(test.params(as.data.frame(Acc_min_Speed_Switch_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V - Acc_min_Speed_Varying_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Repeat_V - Acc_min_Speed_Switch_V)))
# Threshold
Acc_min_Speed_Repeat_A = traces$a_Acc_Repeat - traces$a_Speed_Repeat
kable(test.params(as.data.frame(Acc_min_Speed_Repeat_A)))
Acc_min_Speed_Switch_A = traces$a_Acc_Switch - traces$a_Speed_Switch
kable(test.params(as.data.frame(Acc_min_Speed_Varying_A)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Repeat_A - Acc_min_Speed_Switch_A)))
# Threshold & Drift overall min & max
a_max = max(rbind(traces$a_Acc_Repeat,traces$a_Speed_Repeat,traces$a_Acc_Switch,traces$a_Speed_Switch))
a_min = min(rbind(traces$a_Acc_Repeat,traces$a_Speed_Repeat,traces$a_Acc_Switch,traces$a_Speed_Switch))
v_max = max(rbind(traces$v_Acc_Repeat,traces$v_Speed_Repeat,traces$v_Acc_Switch,traces$v_Speed_Switch))
v_min = min(rbind(traces$v_Acc_Repeat,traces$v_Speed_Repeat,traces$v_Acc_Switch,traces$v_Speed_Switch))
a_max
# Normalization
v_rangeNorm <- function(x){
(x-v_min)/(v_max-v_min)
}
a_rangeNorm <- function(x){
(x-a_min)/(a_max-a_min)
}
Distance_Repeat = sqrt((v_rangeNorm(traces$v_Acc_Repeat) - v_rangeNorm(traces$v_Speed_Repeat))**2 + (a_rangeNorm(traces$a_Acc_Repeat) - a_rangeNorm(traces$a_Speed_Repeat))**2)
Distance_Switch = sqrt((v_rangeNorm(traces$v_Acc_Switch) - v_rangeNorm(traces$v_Speed_Switch))**2 + (a_rangeNorm(traces$a_Acc_Switch) - a_rangeNorm(traces$a_Speed_Switch))**2)
Distance_Diff = Distance_Repeat - Distance_Switch
kable(test.params(as.data.frame(Distance_Diff)))
setwd("C:/Users/igrahek/Dropbox (Brown)/CLPS-ShenhavLab/Experiments/CAC/CAC_Paper_Repo_2023/ControlAdjustmentCosts/Analyses/Experiment2/ddm")
# test
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(grDevices)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
df.ppc <- fread('output/Mixed/ae_only/modelMixed3/modelMixed3_simData.csv') %>%
mutate(simResponse=rt_sampled>0,
Response=rt>0,
rt_unsigned = abs(rt),
rt_sampled_unsigned = abs(rt_sampled))
df.ppc.sim <- df.ppc %>% filter(sample==0,rt_sampled_unsigned<=3)
df.ppc.data <- df.ppc %>% filter(sample==0,rt_unsigned<=3)
ratio.true <- sum(!df.ppc.data$Response)/sum(df.ppc.data$Response)
ratio.simu <- sum(!df.ppc.sim$simResponse)/sum(df.ppc.sim$simResponse)
# Density plots with means
ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True'),
) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation'),
) + geom_hline(yintercept=0) + ggdensity +
xlab('Reaction Time') + coord_cartesian(xlim=c(0,2)) + facet_grid(cols=vars(intervalType,blockType)) + scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) + scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red'))
df.ppc.sim <- df.ppc %>% filter(sample==0,rt_sampled_unsigned<=3)
df.ppc.data <- df.ppc %>% filter(sample==0,rt_unsigned<=3)
ratio.true <- sum(!df.ppc.data$Response)/sum(df.ppc.data$Response)
ratio.simu <- sum(!df.ppc.sim$simResponse)/sum(df.ppc.sim$simResponse)
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
df.ppc.sim <- df.ppc %>% filter(sample==0,rt_sampled_unsigned<=3)
df.ppc.data <- df.ppc %>% filter(sample==0,rt_unsigned<=3)
ratio.true <- sum(!df.ppc.data$Response)/sum(df.ppc.data$Response)
ratio.simu <- sum(!df.ppc.sim$simResponse)/sum(df.ppc.sim$simResponse)
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_B.pdf",height=6,width=26.6)
p = cowplot::plot_grid(FigS1_B,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(blockType),cols=vars(intervalType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
View(df.ppc.data)
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(blockType),rows=vars(intervalType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_B.pdf",height=15,width=10)
p = cowplot::plot_grid(FigS1_B,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType),rows=vars(blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_B = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_B.pdf",height=10,width=15)
p = cowplot::plot_grid(FigS1_B,
nrow = 1,
ncol = 1)
p
dev.off()
