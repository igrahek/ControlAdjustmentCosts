multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
```
# traces<-traces %>% dplyr::select(t,
#                                  z_C.congruency..Sum..S.incongruent.,
#                                  p_outlier)
#
# summary = test.params(traces)
#
traces = read.csv('output/Mixed/ae_only/modelMixed4/modelMixed4_traces.csv')
traces <- read.csv('output/Mixed/ae_only/modelMixed4/modelMixed4_traces.csv')
traces<-traces %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier,)%>%
mutate(a_Intercept = 0.5 * a_Intercept,
a_C.intervalType..Sum..S.Speed. =  0.5 * a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed. =  0.5 * a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = 0.5 * a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime = 0.5 * a_scaledRunningTime,
v_Intercept = v_Intercept,
v_C.intervalType..Sum..S.Speed. = v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed. = v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Fixed = mean(a_Intercept) + a_C.blockType..Sum..S.Fixed.,
a_Mixed = mean(a_Intercept) - a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Fixed = a_C.intervalType..Sum..S.Speed. + a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Mixed = a_C.intervalType..Sum..S.Speed. - a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_Fixed = mean(v_Intercept) + v_C.blockType..Sum..S.Fixed.,
v_Mixed = mean(v_Intercept) - v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Fixed = v_C.intervalType..Sum..S.Speed. + v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Mixed = v_C.intervalType..Sum..S.Speed. - v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Speed_Mixed = a_Mixed + a_C.intervalType..Sum..S.Speed._Mixed,
a_Speed_Fixed = a_Fixed + a_C.intervalType..Sum..S.Speed._Fixed,
a_Acc_Mixed = a_Mixed - a_C.intervalType..Sum..S.Speed._Mixed,
a_Acc_Fixed = a_Fixed - a_C.intervalType..Sum..S.Speed._Fixed,
v_Speed_Mixed = v_Mixed + v_C.intervalType..Sum..S.Speed._Mixed,
v_Speed_Fixed = v_Fixed + v_C.intervalType..Sum..S.Speed._Fixed,
v_Acc_Mixed = v_Mixed - v_C.intervalType..Sum..S.Speed._Mixed,
v_Acc_Fixed = v_Fixed - v_C.intervalType..Sum..S.Speed._Fixed)
traces<-traces %>% dplyr::mutate(a_Diff_Mixed = a_Acc_Mixed - a_Speed_Mixed,
a_Diff_Fixed = a_Acc_Fixed - a_Speed_Fixed,
v_Diff_Mixed = v_Acc_Mixed - v_Speed_Mixed,
v_Diff_Fixed = v_Acc_Fixed - v_Speed_Fixed)
### Difference between the conditions
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Diff_Mixed',
'v_Diff_Fixed'))
threshold<- output %>% filter(parameter %in% c('a_Diff_Mixed',
'a_Diff_Fixed'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(c("Varying","Fixed","Varying","Fixed"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
Acc_min_Speed_Fixed = traces$v_Acc_Fixed - traces$v_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed)))
Acc_min_Speed_Varying = traces$v_Acc_Mixed - traces$v_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed - Acc_min_Speed_Varying)))
# Threshold
Acc_min_Speed_Fixed = traces$a_Acc_Fixed - traces$a_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed)))
Acc_min_Speed_Varying = traces$a_Acc_Mixed - traces$a_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed - Acc_min_Speed_Varying)))
Acc_min_Speed_Fixed = traces$v_Acc_Fixed - traces$v_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed)))
Acc_min_Speed_Varying = traces$v_Acc_Mixed - traces$v_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed - Acc_min_Speed_Varying)))
Acc_min_Speed_Fixed_V = traces$v_Acc_Fixed - traces$v_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V)))
Acc_min_Speed_Varying_V = traces$v_Acc_Mixed - traces$v_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V - Acc_min_Speed_Varying_V)))
# Threshold
Acc_min_Speed_Fixed_A = traces$a_Acc_Fixed - traces$a_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_A)))
Acc_min_Speed_Varying_A = traces$a_Acc_Mixed - traces$a_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying_A)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_A - Acc_min_Speed_Varying_A)))
# fixed
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$v_Speed_Fixed - traces$v_Speed_Fixed)**2)
hist(Distance_Fixed)
Distance_Varying = sqrt((traces$v_Acc_Varying - traces$v_Speed_Varying)**2 + (traces$v_Speed_Varying - traces$v_Speed_Varying)**2)
hist(Distance_Varying)
Distance_Varying
Distance_Varying = sqrt((traces$v_Acc_Varying - traces$v_Speed_Varying)**2 + (traces$v_Speed_Varying - traces$v_Speed_Varying)**2)
Distance_Varying
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$v_Speed_Mixed - traces$v_Speed_Mixed)**2)
hist(Distance_Mixed)
Distance_Diff = Distance_Fixed - Distance_Mixed
Hist(Distance_Diff)
hist(Distance_Diff)
kable(test.params(as.data.frame(Distance_Diff)))
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V)))
Acc_min_Speed_Fixed_V = traces$v_Acc_Fixed - traces$v_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V)))
Acc_min_Speed_Varying_V = traces$v_Acc_Mixed - traces$v_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V - Acc_min_Speed_Varying_V)))
# fixed
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2)
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Speed_Mixed - traces$a_Speed_Mixed)**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
Acc_min_Speed_Fixed_V = traces$v_Acc_Fixed - traces$v_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V)))
Acc_min_Speed_Varying_V = traces$v_Acc_Mixed - traces$v_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V - Acc_min_Speed_Varying_V)))
# Threshold
Acc_min_Speed_Fixed_A = traces$a_Acc_Fixed - traces$a_Speed_Fixed
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_A)))
Acc_min_Speed_Varying_A = traces$a_Acc_Mixed - traces$a_Speed_Mixed
kable(test.params(as.data.frame(Acc_min_Speed_Varying_A)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_A - Acc_min_Speed_Varying_A)))
# distance
# fixed
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2)
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Speed_Mixed - traces$a_Speed_Mixed)**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
hist(Distance_Fixed)
hist(Distance_Mixed)
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_V - Acc_min_Speed_Varying_V)))
# interaction
kable(test.params(as.data.frame(Acc_min_Speed_Fixed_A - Acc_min_Speed_Varying_A)))
# fixed
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2)
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Speed_Mixed - traces$a_Speed_Mixed)**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
?sqrt
sqrt(4)
sqrt(-4)
Distance_Fixed
Distance_Fixed = sqrt(Acc_min_Speed_Fixed_V**2 + Acc_min_Speed_Varying_V**2)
Distance_Fixed
# Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2)
Distance_Fixed = sqrt(Acc_min_Speed_Fixed_V**2 + Acc_min_Speed_Fixed_A**2)
# Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Speed_Mixed - traces$a_Speed_Mixed)**2)
Distance_Mixed = sqrt(Acc_min_Speed_Varying_V**2 + Acc_min_Speed_Varying_A**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
# fixed
Distance_Fixed_1 = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2)
Distance_Fixed = sqrt(Acc_min_Speed_Fixed_V**2 + Acc_min_Speed_Fixed_A**2)
Distance_Fixed_1
Distance_Fixed = sqrt(Acc_min_Speed_Fixed_V**2 + Acc_min_Speed_Fixed_A**2)
Distance_Fixed
(traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2
Acc_min_Speed_Fixed_V**2
(traces$a_Speed_Fixed - traces$a_Speed_Fixed)**2
# fixed
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Acc_Fixed - traces$a_Speed_Fixed)**2)
# Distance_Fixed = sqrt(Acc_min_Speed_Fixed_V**2 + Acc_min_Speed_Fixed_A**2)
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Acc_Mixed - traces$a_Speed_Mixed)**2)
# Distance_Mixed = sqrt(Acc_min_Speed_Varying_V**2 + Acc_min_Speed_Varying_A**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
# Loading libraries
```{r, message=FALSE}
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
```
## Import the posteriors
```{r, message=FALSE}
traces <- read.csv('output/Mixed/ae_only/modelMixed4/modelMixed4_traces.csv')
traces<-traces %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier,)%>%
mutate(a_Intercept = 0.5 * a_Intercept,
a_C.intervalType..Sum..S.Speed. =  0.5 * a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed. =  0.5 * a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = 0.5 * a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime = 0.5 * a_scaledRunningTime,
v_Intercept = v_Intercept,
v_C.intervalType..Sum..S.Speed. = v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed. = v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Fixed = mean(a_Intercept) + a_C.blockType..Sum..S.Fixed.,
a_Mixed = mean(a_Intercept) - a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Fixed = a_C.intervalType..Sum..S.Speed. + a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Mixed = a_C.intervalType..Sum..S.Speed. - a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_Fixed = mean(v_Intercept) + v_C.blockType..Sum..S.Fixed.,
v_Mixed = mean(v_Intercept) - v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Fixed = v_C.intervalType..Sum..S.Speed. + v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Mixed = v_C.intervalType..Sum..S.Speed. - v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Speed_Mixed = a_Mixed + a_C.intervalType..Sum..S.Speed._Mixed,
a_Speed_Fixed = a_Fixed + a_C.intervalType..Sum..S.Speed._Fixed,
a_Acc_Mixed = a_Mixed - a_C.intervalType..Sum..S.Speed._Mixed,
a_Acc_Fixed = a_Fixed - a_C.intervalType..Sum..S.Speed._Fixed,
v_Speed_Mixed = v_Mixed + v_C.intervalType..Sum..S.Speed._Mixed,
v_Speed_Fixed = v_Fixed + v_C.intervalType..Sum..S.Speed._Fixed,
v_Acc_Mixed = v_Mixed - v_C.intervalType..Sum..S.Speed._Mixed,
v_Acc_Fixed = v_Fixed - v_C.intervalType..Sum..S.Speed._Fixed)
traces<-traces %>% dplyr::mutate(a_Diff_Mixed = a_Acc_Mixed - a_Speed_Mixed,
a_Diff_Fixed = a_Acc_Fixed - a_Speed_Fixed,
v_Diff_Mixed = v_Acc_Mixed - v_Speed_Mixed,
v_Diff_Fixed = v_Acc_Fixed - v_Speed_Fixed)
### Difference between the conditions
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Diff_Mixed',
'v_Diff_Fixed'))
threshold<- output %>% filter(parameter %in% c('a_Diff_Mixed',
'a_Diff_Fixed'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(c("Varying","Fixed","Varying","Fixed"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
```
## Parameter estimates
```{r, message=FALSE}
summary <- read.csv('output/Mixed/ae_only/modelMixed4/modelMixed4_traces.csv')
summary<-summary %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier)
summary <- test.params(summary)
summary$CI_upper <- round(summary$CI_upper,2)
summary$CI_lower <- round(summary$CI_lower,2)
summary$CI <- paste0(summary$CI_lower,", ",summary$CI_upper)
summary$Mean <- round(summary$Mean,2)
summary$pvalue <- round(summary$pvalue,2)
kable(summary)
```
## Drift rate and threshold
### Bar plot
```{r, message=FALSE}
# Plot
p<-ggplot(va,aes(x=parameter, y=Mean,fill=fixed)) +
geom_bar(width=0.6,stat="identity", position=position_dodge(0.6),color=NA) +
geom_errorbar(width=.1, size=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower,ymax=CI_upper)) + ylab('Estimate') +
scale_fill_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
scale_x_discrete(expand = c(0.3,0.3),limits = c("Drift Rate","Threshold"))+
scale_y_continuous(expand = c(0,0),limits = c(0,0.8)) +
theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.70, 0.99),
legend.background = element_rect(fill = "transparent", color = NA))
p
kable(va)
# Threshold - difference between fixed and varying
summarize_posterior(traces$a_Diff_Fixed, traces$a_Diff_Mixed, "Threshold - (Fixed:Acc-Speed) - (Mixed: Acc-Speed)")
table = test.params(as.data.frame(traces$a_Diff_Fixed - traces$a_Diff_Mixed))
table[1] = "Threshold (Fixed-Varying)"
kable(table)
# Drift rate - difference between fixed and varying
summarize_posterior(traces$v_Diff_Fixed, traces$v_Diff_Mixed, "Drift - (Fixed:Acc-Speed) - (Mixed: Acc-Speed)")
table = test.params(as.data.frame(traces$v_Diff_Fixed - traces$v_Diff_Mixed))
table[1] = "Drift (Fixed-Varying)"
kable(table)
# Threshold - main effect of the condition type
table = test.params(as.data.frame(c(traces$a_Diff_Fixed,traces$a_Diff_Mixed)))
table[1] = "Threshold (Acc-Speed)"
kable(table)
# Drift - main effect of the condition type
table = test.params(as.data.frame(c(traces$v_Diff_Fixed,traces$v_Diff_Mixed)))
table[1] = "Drift (Acc-Speed)"
kable(table)
# Threshold - main effect of the block type
table = test.params(as.data.frame(c(traces$a_Speed_Mixed,traces$a_Acc_Mixed) - c(traces$a_Speed_Fixed,traces$a_Acc_Fixed)))
table[1] = "Threshold (Varying-Fixed)"
kable(table)
# Drift - main effect of the block type
table = test.params(as.data.frame(c(traces$v_Speed_Mixed,traces$v_Acc_Mixed) - c(traces$v_Speed_Fixed,traces$v_Acc_Fixed)))
table[1] = "Drift (Varying-Fixed)"
kable(table)
```
### Points in 2D
```{r, message=FALSE}
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Acc_Fixed',
'v_Acc_Mixed',
'v_Speed_Fixed',
'v_Speed_Mixed'))
threshold<- output %>% filter(parameter %in% c('a_Acc_Fixed',
'a_Acc_Mixed',
'a_Speed_Fixed',
'a_Speed_Mixed'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(c("Varying","Fixed","Varying","Fixed","Varying","Fixed","Varying","Fixed"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
data = va
data$parameter = c("Drift","Drift","Drift","Drift","Threshold","Threshold","Threshold","Threshold")
# Long to wide
data = pivot_wider(data = data,
id_cols = c(factor,fixed),
names_from = parameter,
values_from = c("Mean","CI_lower","CI_upper"))
data$factor = c("Speed", "Speed","Accuracy","Accuracy")
data$factor = factor(data$factor, levels = c("Speed", "Accuracy"))
levels(data$factor) = c("Speed", "Accuracy")
# data$factor = c("Speed", "Accuracy","Speed & Accuracy" )
p<-ggplot(data,aes(x=Mean_Drift, y=Mean_Threshold,colour = factor,shape = fixed)) +
geom_point(size=6) +
# geom_line(aes(group=fixed),linewidth=1, color="black")+
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(xmin=CI_lower_Drift,xmax=CI_upper_Drift,linetype=fixed)) +
geom_errorbar(width=0, linewidth=1.1, position=position_dodge(width = .6),aes(ymin=CI_lower_Threshold,ymax=CI_upper_Threshold,linetype=fixed))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
ylab("Threshold") +
xlab("Drift Rate") +
scale_x_continuous(limits = c(2,3.3))+
scale_y_continuous(limits = c(0.5,1.4))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig2.DDM = p
```
# Distance
Distance_Fixed = sqrt((traces$v_Acc_Fixed - traces$v_Speed_Fixed)**2 + (traces$a_Acc_Fixed - traces$a_Speed_Fixed)**2)
Distance_Mixed = sqrt((traces$v_Acc_Mixed - traces$v_Speed_Mixed)**2 + (traces$a_Acc_Mixed - traces$a_Speed_Mixed)**2)
Distance_Diff = Distance_Fixed - Distance_Mixed
kable(test.params(as.data.frame(Distance_Diff)))
