geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
scale_x_continuous(limits = c(0.1,2))+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA),
strip.text.x = element_text(margin = margin(b = 10)))
p
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_A = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=8,width=16)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=6,width=20)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType),rows=vars(blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=33,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_A = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=10,width=10)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=10,width=12)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=12,width=12)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=14,width=14)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_A = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=6,width=20)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType,blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_A = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=6,width=20)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=5,width=20)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
# Density plots with means
p = ggplot(df.ppc.data %>% filter(Response),
aes(x=rt_unsigned,color='Correct',linetype='True')) +
geom_density(size=1) +
geom_density(data=df.ppc.data %>% filter(!Response),
size=1,
aes(x=rt_unsigned,y=-..density..*ratio.true,color='Incorrect',linetype='True')) +
geom_density(data=df.ppc.sim %>% filter(simResponse),
size=1,
aes(x=rt_sampled_unsigned,color='Correct',linetype='Simulation')) +
geom_density(data=df.ppc.sim %>% filter(!simResponse),
size=1,
aes(x=rt_sampled_unsigned,y=-..density..*ratio.simu,color='Incorrect',linetype='Simulation')) +
geom_hline(yintercept=0) +
ggdensity +
xlab('Reaction Time') +
ylab('Density') +
coord_cartesian(xlim=c(0,2)) +
facet_grid(cols=vars(intervalType), rows=vars(blockType)) +
scale_linetype_manual(name='Data:',values=c('Simulation'=1,'True'=2)) +
scale_color_manual(name='Response:',values=c('Correct'='blue','Incorrect'='red')) +
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,5,5,5), "mm"),
axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0),color="black"),
text = element_text(size=25,color = "black"),
panel.border = element_rect (colour = "black", fill = F),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
FigS1_A = p
# Save the figure
pdf(file="../../../Manuscript/figures/Figure_S1_A.pdf",height=10,width=10)
p = cowplot::plot_grid(FigS1_A,
nrow = 1,
ncol = 1)
p
dev.off()
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
traces <- read.csv('output/Mixed/ae_only/modelMixed4/modelMixed4_traces.csv')
traces<-traces %>% dplyr::select(a_Intercept,
a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime,
v_Intercept,
v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.congruency..Sum..S.incongruent.,
t,
z_C.congruency..Sum..S.incongruent.,
p_outlier,)%>%
mutate(a_Intercept = 0.5 * a_Intercept,
a_C.intervalType..Sum..S.Speed. =  0.5 * a_C.intervalType..Sum..S.Speed.,
a_C.blockType..Sum..S.Fixed. =  0.5 * a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = 0.5 * a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_scaledRunningTime = 0.5 * a_scaledRunningTime,
v_Intercept = v_Intercept,
v_C.intervalType..Sum..S.Speed. = v_C.intervalType..Sum..S.Speed.,
v_C.blockType..Sum..S.Fixed. = v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed. = v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Fixed = mean(a_Intercept) + a_C.blockType..Sum..S.Fixed.,
a_Mixed = mean(a_Intercept) - a_C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Fixed = a_C.intervalType..Sum..S.Speed. + a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
a_C.intervalType..Sum..S.Speed._Mixed = a_C.intervalType..Sum..S.Speed. - a_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_Fixed = mean(v_Intercept) + v_C.blockType..Sum..S.Fixed.,
v_Mixed = mean(v_Intercept) - v_C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Fixed = v_C.intervalType..Sum..S.Speed. + v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.,
v_C.intervalType..Sum..S.Speed._Mixed = v_C.intervalType..Sum..S.Speed. - v_C.intervalType..Sum..S.Speed..C.blockType..Sum..S.Fixed.)
traces<-traces %>% dplyr::mutate(a_Speed_Mixed = a_Mixed + a_C.intervalType..Sum..S.Speed._Mixed,
a_Speed_Fixed = a_Fixed + a_C.intervalType..Sum..S.Speed._Fixed,
a_Acc_Mixed = a_Mixed - a_C.intervalType..Sum..S.Speed._Mixed,
a_Acc_Fixed = a_Fixed - a_C.intervalType..Sum..S.Speed._Fixed,
v_Speed_Mixed = v_Mixed + v_C.intervalType..Sum..S.Speed._Mixed,
v_Speed_Fixed = v_Fixed + v_C.intervalType..Sum..S.Speed._Fixed,
v_Acc_Mixed = v_Mixed - v_C.intervalType..Sum..S.Speed._Mixed,
v_Acc_Fixed = v_Fixed - v_C.intervalType..Sum..S.Speed._Fixed)
traces<-traces %>% dplyr::mutate(a_Diff_Mixed = a_Acc_Mixed - a_Speed_Mixed,
a_Diff_Fixed = a_Acc_Fixed - a_Speed_Fixed,
v_Diff_Mixed = v_Acc_Mixed - v_Speed_Mixed,
v_Diff_Fixed = v_Acc_Fixed - v_Speed_Fixed)
### Difference between the conditions
output <- test.params(traces)
drift.rate<- output %>% filter(parameter %in% c('v_Diff_Mixed',
'v_Diff_Fixed'))
threshold<- output %>% filter(parameter %in% c('a_Diff_Mixed',
'a_Diff_Fixed'))
va <- rbind(drift.rate,threshold) %>% separate(parameter,c('parameter','factor','fixed'),'_')
labels <- c('Threshold','Drift')
va$factor = as.factor(va$factor)
va$fixed = as.factor(c("Varying","Fixed","Varying","Fixed"))
va$parameter<-factor(va$parameter,labels=c('Threshold','Drift Rate'))
View(output)
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gridExtra)
library(cowplot)
library(sjPlot)
library(RColorBrewer)
library(knitr)
library(data.table)
library(brms)
library(viridis)
# Functions
test.params <- function(df) {
inner_join(inner_join(inner_join(df %>%
map_dfr(mean) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(Mean=estimate),
df %>%
map_dfr(sd) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(SD=estimate),by='parameter'),
df %>% map(~ .x > 0) %>%
map_dfr(mean) %>%
gather(parameter, pvalue, everything()) %>%
mutate(pvalue = if_else(round(pvalue)==1, 1-pvalue, pvalue),
sig = if_else(pvalue < 0.001, "***",
if_else(pvalue < 0.01, "**",
if_else(pvalue < 0.05, "*", "n.s."))))),
inner_join(df %>%
map_dfr(function(x) return(quantile(x,0.975)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_upper=estimate),
df %>% map_dfr(function(x) return(quantile(x,0.025)[[1]])) %>%
gather(parameter, estimate, everything()) %>% dplyr::rename(CI_lower=estimate),by='parameter'),by='parameter')
}
# Define the summary posterior function
summarize_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Base template
gg <- list(
theme_bw(),
theme(plot.title = element_text(hjust = 0.5, size=13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.75, "lines"),
legend.box.spacing = unit(0.5, "lines"),
legend.position = "bottom",
legend.margin = margin(c(0, 0, 0, 0), unit='lines'))
)
# Density template
ggdensity <- list(
gg,
theme(panel.spacing = unit(0.25, "lines"),
legend.key.size = unit(0.7, "lines"),
legend.direction = "horizontal",
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.box.spacing = unit(0.25, "lines"))
)
