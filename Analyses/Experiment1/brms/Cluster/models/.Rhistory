Reward_T4 +
(1|SubID),
df.interval.combined)
# Import the data
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
# Change the variable names
colnames(df.interval.combined)[which(names(df.interval.combined) == "EfficacyLevel")] = "EffLvl"
colnames(df.interval.combined)[which(names(df.interval.combined) == "reward")] = "IsRewarded"
RewardLag = c("IsRewarded_T1",
"IsRewarded_T2",
"IsRewarded_T3",
"IsRewarded_T4")
EfficacyLag = c("Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
df.interval.combined = df.interval.combined %>%
mutate_at("EffLvl",funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at("EffLvl",funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T0 = ordered(df.interval.combined$Efficacy_T0, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$EffLvl) = contr.sdif(2)
colnames(attr(data$EffLvl, "contrasts")) =  c("NEff_min_Eff") # Change the name of the contrasts
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
m = lmer(EfficacyProbeResp ~ 1 +
EffLvl +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
(1|SubID),
df.interval.combined)
summary(m)
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
colnames(df.interval.combined)[which(names(df.interval.combined) == "EfficacyLevel")] = "EffLvl"
colnames(df.interval.combined)[which(names(df.interval.combined) == "reward")] = "IsRewarded"
EfficacyLag = c("Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
df.interval.combined = df.interval.combined %>%
mutate_at("EffLvl",funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at("EffLvl",funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$EffLvl) = contr.sdif(2)
colnames(attr(data$EffLvl, "contrasts")) =  c("NEff_min_Eff") # Change the name of the contrasts
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
colnames(df.interval.combined)[which(names(df.interval.combined) == "EfficacyLevel")] = "EffLvl"
colnames(df.interval.combined)[which(names(df.interval.combined) == "reward")] = "IsRewarded"
EfficacyLag = c("Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
df.interval.combined = df.interval.combined %>%
mutate_at("EffLvl",funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at("EffLvl",funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$EffLvl) = contr.sdif(2)
colnames(attr(df.interval.combined$EffLvl, "contrasts")) =  c("NEff_min_Eff") # Change the name of the contrasts
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
library(lme4)
contrasts(df.interval.combined$Efficacy_T1)
m = lmer(EfficacyProbeResponse ~ EffLvl + Efficacy_T1 + (1|SubID))
m = lmer(EfficacyProbeResponse ~ EffLvl + Efficacy_T1 + (1|SubID),data = df.interval.combined)
m = lmer(EfficacyProbeResp ~ EffLvl + Efficacy_T1 + (1|SubID),data = df.interval.combined)
summary(m)
m = lmer(EfficacyProbeResp ~ EffLvl + Efficacy_T1 + Efficacy_T2 + (1|SubID),data = df.interval.combined)
summary(m)
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
colnames(df.interval.combined)[which(names(df.interval.combined) == "EfficacyLevel")] = "EffLvl"
colnames(df.interval.combined)[which(names(df.interval.combined) == "reward")] = "IsRewarded"
EfficacyLag = c("Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
df.interval.combined = df.interval.combined %>%
mutate_at("EffLvl",funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at("EffLvl",funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$EffLvl) = contr.sdif(2)
df.interval.combined$EffLvl = ordered(df.interval.combined$EffLvl, levels = c("NoEfficacy", "Efficacy"))
colnames(attr(df.interval.combined$EffLvl, "contrasts")) =  c("NEff_min_Eff") # Change the name of the contrasts
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
m = lmer(EfficacyProbeResp ~ EffLvl + Efficacy_T1 + Efficacy_T2 + (1|SubID),data = df.interval.combined)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
colnames(df.interval.combined)[which(names(df.interval.combined) == "EfficacyLevel")] = "EffLvl"
colnames(df.interval.combined)[which(names(df.interval.combined) == "reward")] = "IsRewarded"
EfficacyLag = c("Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
df.interval.combined = df.interval.combined %>%
mutate_at("EffLvl",funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at("EffLvl",funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
df.interval.combined$EffLvl = ordered(df.interval.combined$EffLvl, levels = c("NoEfficacy", "Efficacy"))
contrasts(df.interval.combined$EffLvl) = contr.sdif(2)
colnames(attr(df.interval.combined$EffLvl, "contrasts")) =  c("NEff_min_Eff") # Change the name of the contrasts
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
m = lmer(EfficacyProbeResp ~ EffLvl + Efficacy_T1 + Efficacy_T2 + (1|SubID),data = df.interval.combined)
summary(m)
efficacy = brm(EfficacyProbeResp ~  1 +
Efficacy_T0 +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
(1|SubID),
data=df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),],
family=gaussian(),
prior = prior,
iter  = 20000,
warmup = 19000,
save_pars=save_pars(all=TRUE),
control = list(adapt_delta = 0.99),
sample_prior = TRUE,
cores=4)
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EfficacyLag = c("Efficacy_T0",
"Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"Random" = "NoEfficacy","Performance" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T0 = ordered(df.interval.combined$Efficacy_T0, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$Efficacy_T0) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Set the priors###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
prior = c(
prior(normal(0.5,0.2), class = Intercept), # A wide prior sensible for this type of task
prior(normal(0, 0.2), class = b)) # a wide prior
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Fit the efficacy response model ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
efficacy = brm(EfficacyProbeResp ~  1 +
Efficacy_T0 +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
(1|SubID),
data=df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),],
family=gaussian(),
prior = prior,
iter  = 20000,
warmup = 19000,
save_pars=save_pars(all=TRUE),
control = list(adapt_delta = 0.99),
sample_prior = TRUE,
cores=4)
saveRDS(efficacy,file="../output/model.efficacy.previous.feedback.rds")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Fit the reward response model ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Predicting reward probe response by reward and efficacy feedback
reward = brm(RewardProbeResp ~  1 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
Efficacy_T0 +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
(1|SubID),
data=df.interval.combined[!is.na(df.interval.combined$RewardProbeResp),],
family=gaussian(),
prior = prior,
iter  = 20000,
warmup = 19000,
save_pars=save_pars(all=TRUE),
control = list(adapt_delta = 0.99),
sample_prior = TRUE,
cores=4)
saveRDS(reward,file="../output/model.reward.previous.feedback.rds")
View(df.interval.combined)
hist(df.interval.combined$EfficacyProbeResp)
hist(df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),])
df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),]
x = df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),]
hist(x$EfficacyProbeResp)
View(df.interval.combined)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
View(df.interval.combined)
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EfficacyLag = c("Efficacy_T0",
"Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,0 = "NoEfficacy",1 = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EfficacyLag = c("Efficacy_T0",
"Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(MASS,stats,tidyverse,brms)
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.interval.combined = read.csv("../data/Exp2DataInterval.csv")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Change the variable names and contrast code ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EfficacyLag = c("Efficacy_T0",
"Efficacy_T1",
"Efficacy_T2",
"Efficacy_T3",
"Efficacy_T4")
df.interval.combined = df.interval.combined %>%
mutate_at(EfficacyLag,funs(recode(.,"0" = "NoEfficacy","1" = "Efficacy"))) %>%
mutate_at(EfficacyLag,funs(factor(.)))
# reorder the levels
df.interval.combined$Efficacy_T0 = ordered(df.interval.combined$Efficacy_T0, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T1 = ordered(df.interval.combined$Efficacy_T1, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T2 = ordered(df.interval.combined$Efficacy_T2, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T3 = ordered(df.interval.combined$Efficacy_T3, levels = c("NoEfficacy", "Efficacy"))
df.interval.combined$Efficacy_T4 = ordered(df.interval.combined$Efficacy_T4, levels = c("NoEfficacy", "Efficacy"))
# contrast code
contrasts(df.interval.combined$Efficacy_T0) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T1) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T2) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T3) = contr.sdif(2)
contrasts(df.interval.combined$Efficacy_T4) = contr.sdif(2)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Set the priors###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
prior = c(
prior(normal(0.5,0.2), class = Intercept), # A wide prior sensible for this type of task
prior(normal(0, 0.2), class = b)) # a wide prior
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Fit the efficacy response model ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
efficacy = brm(EfficacyProbeResp ~  1 +
Efficacy_T0 +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
(1|SubID),
data=df.interval.combined[!is.na(df.interval.combined$EfficacyProbeResp),],
family=gaussian(),
prior = prior,
iter  = 20000,
warmup = 19000,
save_pars=save_pars(all=TRUE),
control = list(adapt_delta = 0.99),
sample_prior = TRUE,
cores=4)
saveRDS(efficacy,file="../output/model.efficacy.previous.feedback.rds")
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Fit the reward response model ###
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Predicting reward probe response by reward and efficacy feedback
reward = brm(RewardProbeResp ~  1 +
Reward_T0 +
Reward_T1 +
Reward_T2 +
Reward_T3 +
Reward_T4 +
Efficacy_T0 +
Efficacy_T1 +
Efficacy_T2 +
Efficacy_T3 +
Efficacy_T4 +
(1|SubID),
data=df.interval.combined[!is.na(df.interval.combined$RewardProbeResp),],
family=gaussian(),
prior = prior,
iter  = 20000,
warmup = 19000,
save_pars=save_pars(all=TRUE),
control = list(adapt_delta = 0.99),
sample_prior = TRUE,
cores=4)
saveRDS(reward,file="../output/model.reward.previous.feedback.rds")
# clear the environment
rm(list=ls())
# set seed
set.seed(42)
#load packages and install them if they're not installed. the pacman package will
#automatically check for the requested packages and download & install them if they are not on the computer.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(brms,here,broom,knitr,tidyverse,plyr,cowplot)
# Define the summary posterior function
summarize_posterior <- function(model,variable) {
post = posterior_samples(model, "^b")
ggplot(post,aes_string(x=paste0("`",variable,"`"))) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(variable,"p<0 = ",length(subset(post[[variable]],post[[variable]]<0))/length(post[[variable]]))) +
theme_classic()
}
# Define calculate the posterior probabilities function
posterior_probabilities <- function(model) {
parameter_names = rownames(summary(model)[["fixed"]])
post_prob = rep(0,length(parameter_names))
for (i in 1:length(parameter_names)){
t = hypothesis(model,paste0(parameter_names[i],"<0"))
post_prob[i] = t$hypothesis$Post.Prob
}
return(post_prob)
}
setwd(here::here("Experiment2/Analysis/brms/Cluster/output"))
df.trial = read.csv("../data/SpeedAccuracySpeedAcc_nSubs_38.csv")
getwd()
df.trial = read.csv("../data/SpeedAccuracySpeedAcc_nSubs_38.csv")
library("brms")
library("MASS")
# set seed
set.seed(42)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Import the data
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df.trial= read.csv("../data/SpeedAccuracy_nSubs_44.csv")
df.trial$hit = as.numeric(df.trial$hit)
# Change the name of the congruency variable
df.trial$Congruency = df.trial$type
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### Re-scale the data
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Center the continuous variables
df.trial$scaledIntervalLength = scale(df.trial$scaledIntervalLength, scale= FALSE, center = TRUE)
df.trial$scaledIntervalSessionNum = scale(df.trial$scaledIntervalSessionNum, scale= FALSE, center = TRUE)
# Contrast code the categorical variables
df.trial$Congruency = ordered(df.trial$type, levels = c("congruent", "incongruent"))
contrasts(df.trial$Congruency) = contr.sdif(2)
colnames(attr(df.trial$Congruency, "contrasts")) =  c("inc_min_con")
df.trial$blockType = ordered(df.trial$blockType, levels = c("Mixed","Fixed"))
contrasts(df.trial$blockType) = contr.sdif(2)
colnames(attr(df.trial$blockType, "contrasts")) =  c("Mixed_min_Fixed")
df.trial$intervalType = ordered(df.trial$intervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$intervalType) = contr.sdif(2)
colnames(attr(df.trial$intervalType, "contrasts")) =  c("Speed_min_Accuracy")
df.trial$previntervalType = ordered(df.trial$previntervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$previntervalType) = contr.sdif(2)
colnames(attr(df.trial$previntervalType, "contrasts")) =  c("Speed_min_Accuracy")
df.trial$Switch = ordered(df.trial$Switch, levels = c("Switch","Repeat"))
contrasts(df.trial$Switch) = contr.sdif(2)
colnames(attr(df.trial$Switch, "contrasts")) =  c("Switch_min_Repeat")
df.trial$intervalNumHalf = ifelse(df.trial$intervalNum>15,"Second","First")
df.trial$intervalNumHalf = ordered(df.trial$intervalNumHalf, levels = c("Second","First"))
contrasts(df.trial$intervalNumHalf) = contr.sdif(2)
colnames(attr(df.trial$intervalNumHalf, "contrasts")) =  c("Second_min_First")
