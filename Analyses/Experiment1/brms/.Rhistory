set.seed(42)
# df.trial = read_csv("../../data/ProcessedData/CleanDataSpeedAccuracy_nSubs_73.csv")
df.trial = read_csv("../../data/ProcessedData/CleanDataSpeedAccuracy_nSubs_231.csv")
# remove people with no age records
df.trial <- df.trial[complete.cases(df.trial$Age), ]
# Interval types
summary_table = ddply(df.trial,.(SubID,blockType,intervalType),plyr::summarize,
MeanRT=mean(rt,na.rm=TRUE), # mean RT per condition
MeanAcc=mean(hit,na.rm=TRUE),
Ntrials=length(hit))
print(kable(summary_table, align="l", caption="Interval types"))
# summary_table = ddply(df.trial,.(blockType,intervalType,type,trialNum),plyr::summarize,
#                                        Ntrials=length(hit))%>%
#   filter(trialNum<6)
#
# plot = ggplot(data=summary_table,
#                aes(x=trialNum,y=Ntrials,group=type))+
#                geom_line(aes(linetype=type),size=1)+
#                geom_point(size=2)+
#                  facet_grid(.~blockType) +
#
#   scale_x_continuous(breaks = 1:10)+
#     theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,15,5,5), "mm"),
#         axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
#         text = element_text(size=20),
#         panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.border = element_blank(),
#         panel.background = element_blank(),
#         plot.title = element_text(hjust = 0.5,size = 20, face = "bold"))
# # Accuracy per subject
# summary_table = ddply(df.trial,.(SubID),plyr::summarize,
#                                        MeanRT=mean(rt,na.rm=TRUE), # mean RT per condition
#                                        MeanAcc=mean(hit,na.rm=TRUE),
#                                        Ntrials=length(hit))
# print(kable(summary_table, align="l", caption="Accuracy"))
df.errors<-df.trial%>%
filter(hit==0)%>%
dplyr::select(SubID,ErrorType,rt,intervalType)
df.errorTypesSummary<-df.errors %>%
dplyr:: group_by(SubID,ErrorType,intervalType) %>%
dplyr::  summarise(count=n(),
avgRT=mean(rt))
# Summarize age
age_summary = subset(df.trial,df.trial$blockNum==1 & df.trial$trialNum==1 & df.trial$intervalNum==1)
age_summary = df.trial %>% distinct(uniqueid, .keep_all = TRUE)
hist(age_summary$Age, breaks = 20)
x = table(age_summary$AgeGroup)
x = as.data.frame(x)
colnames(x) = c("Age group", "Count")
kable(x)
# Set parameters for plots
set_theme(base =theme_bw(base_size = 15, base_family = "")) # font size and theme
myColors = brewer.pal(3,"Set2") #colors
# names(myColors) = levels(data$Congruency)
# colScale = scale_colour_manual(name = "Congruency",values = myColors)
barfill <- "#4271AE"
barlines <- "#1F3552"
p =ggplot(age_summary, aes(x=Age)) +
geom_histogram(binwidth = 3,colour = barlines, fill = barfill)+ #colour = barlines, fill = barfill
ggtitle("Age\n") +
theme_bw() +
#scale_x_continuous(limits = c(-0.01,0.4),breaks=seq(0, 0.4, by = 0.1)) +
labs(x = "Age", y = "Count\n")+
theme(axis.line = element_line(size=1, colour = "black"),
panel.grid.major = element_line(colour = "grey",size = 0.1,linetype = "dashed"),
panel.grid.minor = element_line(colour = "grey",size = 0.1,linetype = "dashed"),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 18,  face = "bold",hjust = 0.5),
text=element_text(colour="black", size = 14),
axis.text.x=element_text(colour="black", size = 14),
axis.text.y=element_text(colour="black", size = 14, face = "plain",hjust=0),
axis.title=element_text(size=18,colour = "black",vjust = 1))
p
# Center the continuous variables
df.trial$scaledIntervalLength = scale(df.trial$scaledIntervalLength, scale= FALSE, center = TRUE) # here
df.trial$scaledIntervalSessionNum = scale(df.trial$scaledIntervalSessionNum, scale= FALSE, center = TRUE)
df.trial$Age = scale(df.trial$Age, scale= TRUE, center = TRUE)
df.trial$Age = as.numeric(df.trial$Age)
# unique_df <- unique(df.trial[c("SubID", "Age")])
# hist(unique_df$Age, breaks=15, xlab="Age", main="Age distribution")
# Contrast code the categorical variables
df.trial$congruency = df.trial$type
df.trial$congruency = ordered(df.trial$congruency, levels = c("congruent", "incongruent"))
contrasts(df.trial$congruency) = contr.sdif(2)
colnames(attr(df.trial$congruency, "contrasts")) =  c("inc_min_con")
df.trial$intervalType = ordered(df.trial$intervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$intervalType) = contr.sdif(2)
colnames(attr(df.trial$intervalType, "contrasts")) =  c("Accuracy_min_Speed")
df.trial$AgeGroup = ordered(df.trial$AgeGroup, levels = c("Middle","Young","Old"))
contrasts(df.trial$AgeGroup) = contr.sdif(3)
colnames(attr(df.trial$AgeGroup, "contrasts")) =  c("Old_min_Young","Young_min_Middle")
df.trial$blockType = ifelse(df.trial$blockType=="Mixed","Varying","Fixed")
df.trial$blockType = ordered(df.trial$blockType, levels = c("Fixed","Varying"))
contrasts(df.trial$blockType) = contr.sdif(2)
colnames(attr(df.trial$blockType, "contrasts")) =  c("Varying_min_Fixed")
df.trial$previntervalType = ordered(df.trial$previntervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$previntervalType) = contr.sdif(2)
colnames(attr(df.trial$previntervalType, "contrasts")) =  c("Accuracy_min_Speed")
df.trial$Switch = ordered(df.trial$Switch, levels = c("Switch","Repeat"))
contrasts(df.trial$Switch) = contr.sdif(2)
colnames(attr(df.trial$Switch, "contrasts")) =  c("Repeat_min_Switch")
df.trial$intervalNumHalf = ifelse(df.trial$intervalNum>15,"Second","First")
df.trial$intervalNumHalf = ordered(df.trial$intervalNumHalf, levels = c("Second","First"))
contrasts(df.trial$intervalNumHalf) = contr.sdif(2)
colnames(attr(df.trial$intervalNumHalf, "contrasts")) =  c("Second_min_First")
data.AgeGroup = subset(df.trial,AgeGroup!="Middle")
data.AgeGroup$AgeGroup = ordered(data.AgeGroup$AgeGroup, levels = c("Young","Old"))
contrasts(data.AgeGroup$AgeGroup) = contr.sdif(2)
colnames(attr(data.AgeGroup$AgeGroup, "contrasts")) =  c("Old_min_Young")
model.accrt = lmer(log10_AccRT ~ congruency + intervalType*blockType*AgeGroup + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = data.AgeGroup, REML = F)
tab_model(model.accrt,title = "RT - Trial Based")
p = plot_model(model.accrt,type = "pred", terms = c("intervalType","blockType"),colors = c(rgb(0.1, 0.1, 0.1),rgb(0.5, 0.5, 0.5)),dot.size = 2.5, line.size = 1.5,dodge = .3)
p$labels$colour = "Block type"
# make legend smaller
p$theme$legend.key.size = unit(0.5, "cm")
p = p +
guides(color = guide_legend(override.aes = list(shape = 20))) +
ylab("Reaction times (log ms)") +
ggtitle("")+
xlab("Performance goal") +
#scale_x_discrete(labels = c("Speed", "Accuracy"), expand = c(0.2, 0.2)) +
# scale_y_continuous(limits = c(600,810))+
scale_color_viridis(discrete = TRUE, option = "plasma", end = 0.7) +
theme(axis.line = element_line(colour = "black"),
plot.margin = grid::unit(c(5, 85, 5, 5), "mm"),
axis.line.x.bottom = element_line(size = 0.5),
axis.line.y.left = element_line(size = 0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size = 33, color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
p
p = plot_model(model.accrt,type = "pred", terms = c("intervalType","blockType","AgeGroup"),colors = c(rgb(0.1, 0.1, 0.1),rgb(0.5, 0.5, 0.5)),dot.size = 2.5, line.size = 1.5,dodge = .3)
p$labels$colour = "Block type"
# make legend smaller
p$theme$legend.key.size = unit(0.5, "cm")
p = p +
guides(color = guide_legend(override.aes = list(shape = 20))) +
ylab("Reaction times (log ms)") +
ggtitle("")+
xlab("Performance goal") +
scale_x_discrete(labels = c("Speed", "Accuracy"), expand = c(0.2, 0.2)) +
# scale_y_continuous(limits = c(600,810))+
scale_color_viridis(discrete = TRUE, option = "plasma", end = 0.7) +
theme(axis.line = element_line(colour = "black"),
plot.margin = grid::unit(c(5, 85, 5, 5), "mm"),
axis.line.x.bottom = element_line(size = 0.5),
axis.line.y.left = element_line(size = 0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size = 33, color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
p
tab_model(model.accrt,title = "RT - Trial Based")
model.acc = glmer(hit ~ congruency + intervalType*blockType*AgeGroup + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = data.AgeGroup, family = binomial(link="logit"))
tab_model(model.acc,title = "Accuracy - Trial Based")
############## Control adjustment costs #########################
p = plot_model(model.acc,type = "pred", terms = c("intervalType","blockType"),colors = c(rgb(0.1, 0.1, 0.1),rgb(0.5, 0.5, 0.5)),dot.size = 2.5, line.size = 1.5,dodge = .3)
p$labels$colour = "Block type"
# make legend smaller
p$theme$legend.key.size = unit(0.5, "cm")
p = p +
#guides(color = guide_legend(override.aes = list(shape = 20))) +
ylab("Accuracy") +
ggtitle("")+
xlab("Performance goal") +
#scale_x_discrete(labels = c("Speed", "Accuracy"), expand = c(0.2, 0.2)) +
# scale_y_continuous(limits = c(600,810))+
scale_color_viridis(discrete = TRUE, option = "plasma", end = 0.7) +
theme(axis.line = element_line(colour = "black"),
plot.margin = grid::unit(c(5, 85, 5, 5), "mm"),
axis.line.x.bottom = element_line(size = 0.5),
axis.line.y.left = element_line(size = 0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size = 33, color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
p
############## Control adjustment costs across age #########################
p = plot_model(model.acc,type = "pred", terms = c("intervalType", "blockType","AgeGroup"),colors = c(rgb(0.1, 0.1, 0.1),rgb(0.5, 0.5, 0.5)),dot.size = 2.5, line.size = 1.5,dodge = .3)
p$labels$colour = "Block type"
# make legend smaller
p$theme$legend.key.size = unit(0.5, "cm")
p = p +
#guides(color = guide_legend(override.aes = list(shape = 20))) +
ylab("Accuracy") +
ggtitle("")+
xlab("Performance goal") +
scale_x_discrete(labels = c("Speed", "Accuracy"), expand = c(0.2, 0.2)) +
# scale_y_continuous(limits = c(600,810))+
scale_color_viridis(discrete = TRUE, option = "plasma", end = 0.7) +
theme(axis.line = element_line(colour = "black"),
plot.margin = grid::unit(c(5, 85, 5, 5), "mm"),
axis.line.x.bottom = element_line(size = 0.5),
axis.line.y.left = element_line(size = 0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size = 33, color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
p
# Fit the models without the age variable
model.accrt = lmer(log10_AccRT ~ congruency + intervalType*blockType + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = df.trial, REML = F)
model.acc = glmer(hit ~ congruency + intervalType*blockType + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = df.trial, family = binomial(link="logit"))
knitr::opts_chunk$set(echo = TRUE)
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
# Interval types
summary_table = ddply(df.trial,.(SubID,blockType,intervalType),plyr::summarize,
MeanRT=mean(rt,na.rm=TRUE), # mean RT per condition
MeanAcc=mean(hit,na.rm=TRUE),
Ntrials=length(hit))
# clear the environment
rm(list=ls())
#load packages and install them if they're not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr,tidyverse, lme4,MASS,sjPlot,coefplot,cowplot,psych,rmarkdown,knitr,kable,cowplot,viridis,RColorBrewer)
# set seed
set.seed(42)
# df.trial = read_csv("../../data/ProcessedData/CleanDataSpeedAccuracy_nSubs_73.csv")
df.trial = read_csv("../../data/ProcessedData/CleanDataSpeedAccuracy_nSubs_231.csv")
# remove people with no age records
df.trial <- df.trial[complete.cases(df.trial$Age), ]
# Interval types
summary_table = ddply(df.trial,.(SubID,blockType,intervalType),plyr::summarize,
MeanRT=mean(rt,na.rm=TRUE), # mean RT per condition
MeanAcc=mean(hit,na.rm=TRUE),
Ntrials=length(hit))
print(kable(summary_table, align="l", caption="Interval types"))
# summary_table = ddply(df.trial,.(blockType,intervalType,type,trialNum),plyr::summarize,
#                                        Ntrials=length(hit))%>%
#   filter(trialNum<6)
#
# plot = ggplot(data=summary_table,
#                aes(x=trialNum,y=Ntrials,group=type))+
#                geom_line(aes(linetype=type),size=1)+
#                geom_point(size=2)+
#                  facet_grid(.~blockType) +
#
#   scale_x_continuous(breaks = 1:10)+
#     theme(axis.line = element_line(colour = "black"),plot.margin=grid::unit(c(5,15,5,5), "mm"),
#         axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
#         text = element_text(size=20),
#         panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.border = element_blank(),
#         panel.background = element_blank(),
#         plot.title = element_text(hjust = 0.5,size = 20, face = "bold"))
# # Accuracy per subject
# summary_table = ddply(df.trial,.(SubID),plyr::summarize,
#                                        MeanRT=mean(rt,na.rm=TRUE), # mean RT per condition
#                                        MeanAcc=mean(hit,na.rm=TRUE),
#                                        Ntrials=length(hit))
# print(kable(summary_table, align="l", caption="Accuracy"))
df.errors<-df.trial%>%
filter(hit==0)%>%
dplyr::select(SubID,ErrorType,rt,intervalType)
df.errorTypesSummary<-df.errors %>%
dplyr:: group_by(SubID,ErrorType,intervalType) %>%
dplyr::  summarise(count=n(),
avgRT=mean(rt))
# Summarize age
age_summary = subset(df.trial,df.trial$blockNum==1 & df.trial$trialNum==1 & df.trial$intervalNum==1)
age_summary = df.trial %>% distinct(uniqueid, .keep_all = TRUE)
hist(age_summary$Age, breaks = 20)
x = table(age_summary$AgeGroup)
x = as.data.frame(x)
colnames(x) = c("Age group", "Count")
kable(x)
# Set parameters for plots
set_theme(base =theme_bw(base_size = 15, base_family = "")) # font size and theme
myColors = brewer.pal(3,"Set2") #colors
# names(myColors) = levels(data$Congruency)
# colScale = scale_colour_manual(name = "Congruency",values = myColors)
barfill <- "#4271AE"
barlines <- "#1F3552"
p =ggplot(age_summary, aes(x=Age)) +
geom_histogram(binwidth = 3,colour = barlines, fill = barfill)+ #colour = barlines, fill = barfill
ggtitle("Age\n") +
theme_bw() +
#scale_x_continuous(limits = c(-0.01,0.4),breaks=seq(0, 0.4, by = 0.1)) +
labs(x = "Age", y = "Count\n")+
theme(axis.line = element_line(size=1, colour = "black"),
panel.grid.major = element_line(colour = "grey",size = 0.1,linetype = "dashed"),
panel.grid.minor = element_line(colour = "grey",size = 0.1,linetype = "dashed"),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 18,  face = "bold",hjust = 0.5),
text=element_text(colour="black", size = 14),
axis.text.x=element_text(colour="black", size = 14),
axis.text.y=element_text(colour="black", size = 14, face = "plain",hjust=0),
axis.title=element_text(size=18,colour = "black",vjust = 1))
p
# Center the continuous variables
df.trial$scaledIntervalLength = scale(df.trial$scaledIntervalLength, scale= FALSE, center = TRUE) # here
df.trial$scaledIntervalSessionNum = scale(df.trial$scaledIntervalSessionNum, scale= FALSE, center = TRUE)
df.trial$Age = scale(df.trial$Age, scale= TRUE, center = TRUE)
df.trial$Age = as.numeric(df.trial$Age)
# unique_df <- unique(df.trial[c("SubID", "Age")])
# hist(unique_df$Age, breaks=15, xlab="Age", main="Age distribution")
# Contrast code the categorical variables
df.trial$congruency = df.trial$type
df.trial$congruency = ordered(df.trial$congruency, levels = c("congruent", "incongruent"))
contrasts(df.trial$congruency) = contr.sdif(2)
colnames(attr(df.trial$congruency, "contrasts")) =  c("inc_min_con")
df.trial$intervalType = ordered(df.trial$intervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$intervalType) = contr.sdif(2)
colnames(attr(df.trial$intervalType, "contrasts")) =  c("Accuracy_min_Speed")
df.trial$AgeGroup = ordered(df.trial$AgeGroup, levels = c("Middle","Young","Old"))
contrasts(df.trial$AgeGroup) = contr.sdif(3)
colnames(attr(df.trial$AgeGroup, "contrasts")) =  c("Old_min_Young","Young_min_Middle")
df.trial$blockType = ifelse(df.trial$blockType=="Mixed","Varying","Fixed")
df.trial$blockType = ordered(df.trial$blockType, levels = c("Fixed","Varying"))
contrasts(df.trial$blockType) = contr.sdif(2)
colnames(attr(df.trial$blockType, "contrasts")) =  c("Varying_min_Fixed")
df.trial$previntervalType = ordered(df.trial$previntervalType, levels = c("Speed","Accuracy"))
contrasts(df.trial$previntervalType) = contr.sdif(2)
colnames(attr(df.trial$previntervalType, "contrasts")) =  c("Accuracy_min_Speed")
df.trial$Switch = ordered(df.trial$Switch, levels = c("Switch","Repeat"))
contrasts(df.trial$Switch) = contr.sdif(2)
colnames(attr(df.trial$Switch, "contrasts")) =  c("Repeat_min_Switch")
df.trial$intervalNumHalf = ifelse(df.trial$intervalNum>15,"Second","First")
df.trial$intervalNumHalf = ordered(df.trial$intervalNumHalf, levels = c("Second","First"))
contrasts(df.trial$intervalNumHalf) = contr.sdif(2)
colnames(attr(df.trial$intervalNumHalf, "contrasts")) =  c("Second_min_First")
# Fit the models without the age variable
model.accrt = lmer(log10_AccRT ~ congruency + intervalType*blockType + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = df.trial, REML = F)
model.acc = glmer(hit ~ congruency + intervalType*blockType + scaledIntervalSessionNum + scaledIntervalLength + scaledRunningTime + (intervalType * blockType|uniqueid),data = df.trial, family = binomial(link="logit"))
# Accuracy
raneff.accrt = lme4::ranef(model.acc)
raneff = as.data.frame(matrix(nrow=length(raneff.accrt[["uniqueid"]][["(Intercept)"]]),ncol=5))
colnames(raneff) = c("SubID","Intercept","Speed_min_Acc","Varying_min_Fixed","Cost")
raneff$SubID = coef(model.accrt)$uniqueid$uniqueid
raneff$Age = age_summary$Age
raneff$Intercept = coef(model.accrt)$uniqueid$`(Intercept)`
raneff$Speed_min_Acc = coef(model.accrt)$uniqueid$intervalTypeAccuracy_min_Speed
raneff$Varying_min_Fixed = coef(model.accrt)$uniqueid$blockTypeVarying_min_Fixed
raneff$Cost = coef(model.accrt)$uniqueid$`intervalTypeAccuracy_min_Speed:blockTypeVarying_min_Fixed`
hist(raneff$Cost,breaks=30)
model = lm(Age~Cost, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Cost"))
plot_model(model,"pred", terms = c("Cost"))
model = lm(Age~Cost*Speed_min_Acc, data = raneff)
model = lm(Age~Cost*Speed_min_Acc, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Cost","Age"))
plot_model(model,"pred", terms = c("Cost","Speed_min_Acc"))
plot_model(model,"pred", terms = c("Cost","Speed_min_Acc"))
model = lm(Cost~Age*Speed_min_Acc, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Cost","Speed_min_Acc"))
plot_model(model,"pred", terms = c("Age","Speed_min_Acc"))
tab_model(model)
model = lm(Speed_min_Acc~Age, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
tab_model(model)
model = lm(Speed_min_Acc~Intercept+Age, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Speed_min_Acc~Intercept+Age+Cost, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Speed_min_Acc~Intercept*Age*Cost, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Speed_min_Acc~IAge*Cost, data = raneff)
tab_model(model)
model = lm(Speed_min_Acc~Age*Cost, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
plot_model(model,"pred", terms = c("Age","Cost"))
model = lm(Cost~poly(Age,2)*Cost, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age","Cost"))
model = lm(Cost~poly(Age,2), data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Cost~poly(Age,2)*Speed_min_Acc, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
plot_model(model,"pred", terms = c("Speed_min_Accuracy","Age"))
plot_model(model,"pred", terms = c("Speed_min_Acc","Age"))
model = lm(Cost~poly(Age,2, data = raneff)
plot_model(model,"pred", terms = c("Speed_min_Acc","Age"))
model = lm(Cost~poly(Age,2), data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Cost~poly(Age,2)+Speed_min_Acc, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
# Accuracy
raneff.acc = lme4::ranef(model.acc)
raneff = as.data.frame(matrix(nrow=length(raneff.acc[["uniqueid"]][["(Intercept)"]]),ncol=5))
colnames(raneff) = c("SubID","Intercept","Speed_min_Acc","Varying_min_Fixed","Cost")
raneff$SubID = coef(model.accrt)$uniqueid$uniqueid
raneff$Age = age_summary$Age
raneff$Intercept = coef(model.accrt)$uniqueid$`(Intercept)`
raneff$Speed_min_Acc = coef(model.accrt)$uniqueid$intervalTypeAccuracy_min_Speed
raneff$Varying_min_Fixed = coef(model.accrt)$uniqueid$blockTypeVarying_min_Fixed
raneff$Cost = coef(model.accrt)$uniqueid$`intervalTypeAccuracy_min_Speed:blockTypeVarying_min_Fixed`
hist(raneff$Cost,breaks=30)
model = lm(Cost~poly(Age,2)+Speed_min_Acc, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Cost~poly(Age,2)+Speed_min_Acc+Intercept, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
model = lm(Cost~poly(Age,2)+Speed_min_Acc+Intercept+Varying_min_Fixed, data = raneff)
tab_model(model)
plot_model(model,"pred", terms = c("Age"))
tab_model(model.acc)
# Accuracy
raneff.acc = lme4::ranef(model.acc)
raneff = as.data.frame(matrix(nrow=length(raneff.acc[["uniqueid"]][["(Intercept)"]]),ncol=5))
colnames(raneff) = c("SubID","Intercept","Speed_min_Acc","Varying_min_Fixed","Cost")
raneff$SubID = coef(model.accrt)$uniqueid$uniqueid
raneff$Age = age_summary$Age
raneff$Intercept = coef(model.accrt)$uniqueid$`(Intercept)`
raneff$Speed_min_Acc = coef(model.accrt)$uniqueid$intervalTypeAccuracy_min_Speed
raneff$Varying_min_Fixed = coef(model.accrt)$uniqueid$blockTypeVarying_min_Fixed
raneff$Cost = coef(model.accrt)$uniqueid$`intervalTypeAccuracy_min_Speed:blockTypeVarying_min_Fixed`
View(raneff)
View(raneff.acc)
raneff.acc[["uniqueid"]][["intervalTypeAccuracy_min_Speed:blockTypeVarying_min_Fixed"]]
?coef
View(model.acc)
View(raneff.acc)
raneff.acc[["uniqueid"]][["intervalTypeAccuracy_min_Speed"]]
# clear the environment
rm(list=ls())
# set seed
set.seed(42)
#load packages and install them if they're not installed. the pacman package will
#automatically check for the requested packages and download & install them if they are not on the computer.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(brms,here,broom,knitr,tidyverse,plyr,cowplot,emmeans,tidybayes,viridis,MASS)
# Define the summary posterior function
summarize_posterior <- function(model,variable) {
post = posterior_samples(model, "^b")
ggplot(post,aes_string(x=paste0("`",variable,"`"))) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(variable,"p<0 = ",length(subset(post[[variable]],post[[variable]]<0))/length(post[[variable]]))) +
theme_classic()
}
# Define the difference summary posterior function
summarize_difference_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
# Define calculate the posterior probabilities function
posterior_probabilities <- function(model) {
parameter_names = rownames(summary(model)[["fixed"]])
post_prob = rep(0,length(parameter_names))
for (i in 1:length(parameter_names)){
t = hypothesis(model,paste0(parameter_names[i],"<0"))
post_prob[i] = t$hypothesis$Post.Prob
}
return(post_prob)
}
model = readRDS("Cluster/output/model.RT.rds")
setwd("C:/Users/igrahek/Dropbox (Brown)/CLPS-ShenhavLab/Experiments/CAC/CAC_Paper_Repo_2023/ControlAdjustmentCosts/Analyses/Experiment1/brms")
model = readRDS("Cluster/output/model.RT.rds")
t.stat <- function(x) fixef(x)/sqrt(diag(vcov(x)))
t.stat(model)
summary(model)
tab_model(model)
library(sjPlot)
tab_model(model)
