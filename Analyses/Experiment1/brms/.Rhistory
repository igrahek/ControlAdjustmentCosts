panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig2.RT_Congruency = p
model = readRDS("Cluster/output/model.Acc_Congruency.rds")
# Extract posteriors
posterior = as_draws_df(model, variable = c("b_Intercept",
"b_intervalTypeSpeed_min_Accuracy",
"b_blockTypeMixed_min_Fixed",
"b_intervalTypeSpeed_min_Accuracy:blockTypeMixed_min_Fixed",
"b_Congruencyinc_min_con",
"b_Congruencyinc_min_con:intervalTypeSpeed_min_Accuracy",
"b_Congruencyinc_min_con:blockTypeMixed_min_Fixed",
"b_Congruencyinc_min_con:intervalTypeSpeed_min_Accuracy:blockTypeMixed_min_Fixed"))
coding.intervalType = cbind(c(1,1),contr.sum(2))
coding.blockType = cbind(c(1,1),contr.sum(2))
coding.isi = cbind(c(1,1),contr.sum(2))
coding.total = coding.isi %x% coding.blockType %x% coding.intervalType
# Remove the non-necessary variables
posterior = posterior[,1:8]
# Set the intercept to the mean value
posterior$b_Intercept = mean(posterior$b_Intercept)
# Transform the posteriors
Congruent_min_Incongruent = cbind(c(1,1),contr.sdif(2))
Speed_min_Accuracy = cbind(c(1,1),contr.sdif(2))
Mixed_min_Fixed = cbind(c(1,1),contr.sdif(2))
coding.total = as.matrix(Congruent_min_Incongruent) %x% as.matrix(Speed_min_Accuracy) %x% as.matrix(Mixed_min_Fixed)
# Create predictions from all the posterior samples
results =  as.data.frame(t(coding.total %*% t(posterior)))
colnames(results) = c("Speed_Varying_Congruent",
"Accuracy_Varying_Congruent",
"Speed_Fixed_Congruent",
"Accuracy_Fixed_Congruent",
"Speed_Varying_Incongruent",
"Accuracy_Varying_Incongruent",
"Speed_Fixed_Incongruent",
"Accuracy_Fixed_Incongruent")
results = as.data.frame(posterior_summary(results))
results$factor = rownames(results)
results = results %>% separate(factor,c('Interval Type','Block Type','Congruency'),'_')
# Turn logits into probabilities
results$Estimate = exp(results$Estimate)
results$Estimate = results$Estimate / (1 + results$Estimate)
results$Q2.5 = exp(results$Q2.5)
results$Q2.5 = results$Q2.5 / (1 + results$Q2.5)
results$Q97.5 = exp(results$Q97.5)
results$Q97.5 = results$Q97.5 / (1 + results$Q97.5)
# Reorder the factor levels
results$`Interval Type` = factor(results$`Interval Type`, levels = c("Speed", "Accuracy"))
# Plot
p = ggplot(results,aes(x=`Interval Type`,y=Estimate,linetype=`Block Type`,shape=`Block Type`,color=`Interval Type`)) +
geom_pointrange(aes(ymin=Q2.5, ymax=Q97.5),position=position_dodge(0.4),size=2, fatten = 2) +
guides(color = guide_legend(
override.aes=list(shape = 20)))+
# ggtitle("Accuracy")+
ylab("Accuracy")+
xlab("Performance goal")+
scale_x_discrete(limits = c("Speed","Accuracy"), expand=c(0.2, 0.2))+
scale_y_continuous(limits = c(0.58,1))+
scale_color_viridis(discrete = TRUE ,option = "plasma",end=0.7)+
facet_grid(~Congruency)+
theme(axis.line = element_line(colour = "black"),
plot.margin=grid::unit(c(5,85,5,5), "mm"),
axis.line.x.bottom=element_line(size=0.5),
axis.line.y.left=element_line(size=0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
text = element_text(size=33,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size = 20, face = "bold"),
axis.text.x = element_text(color="black"),
axis.text.y = element_text(color="black"),
axis.ticks = element_line(color = "black"),
legend.position = c(0.8, 0.25),
legend.background = element_rect(fill = "transparent", color = NA))
p
Fig2.Acc_Congruency = p
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=16)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 2)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=32)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 2)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=32)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 1)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=16)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 1)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=32)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 1)
p
dev.off()
pdf(file="../../../Manuscript/figures/Figure_2_behavior_congruency.pdf",height=6,width=22)
p = cowplot::plot_grid(Fig2.RT_Congruency,
Fig2.Acc_Congruency,
nrow = 1)
p
dev.off()
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
View(posteriorConditions)
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Fixed_Congruent(Speed_Fixed$.value)
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Fixed_Congruent(Speed_Fixed$.value)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Fixed_Congruent(Speed_Fixed_Congruent$.value)
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Fixed_Congruent(Speed_Fixed_Congruent$.value)
Speed_Fixed_Congruent
View(Speed_Fixed_Congruent)
Speed_Fixed_Congruent
Speed_Fixed_Congruent.value
Speed_Fixed_Congruent$.value
posterior_summary(Speed_Fixed_Congruent$.value)
summarize_posterior(Speed_Fixed_Congruent$.value)
summarize_posterior(Speed_Fixed_Congruent,value)
summarize_posterior(Speed_Fixed_Congruent,value)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
# plot_model(model,type = "pred", terms = c("intervalType","blockType","Congruency"))
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
summarize_posterior(Speed_Fixed_Congruent,value)
# Speed goal
Speed_Goal = Speed_Varying$.value - Speed_Fixed$.value
# plot_model(model,type = "pred", terms = c("intervalType","blockType","Congruency"))
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
# Calculate the conditions
Speed_Fixed = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed")
posterior_summary(Speed_Fixed$.value)
Speed_Varying = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed")
posterior_summary(Speed_Varying$.value)
Accuracy_Fixed = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed")
Accuracy_Varying = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed")
#
# # Create a matrix
# p1 = ddply(p1,.(blockType,intervalType),plyr::summarize,
#                       estimate__ = posterior_summary(Estimate)[1],
#                       lower__ = posterior_summary(Estimate)[3],
#                       upper__ = posterior_summary(Estimate)[4])
# # Default plot
# p = conditional_effects(model, effects = "intervalType:blockType")
#
# # Convert to a data frame
# p = as.data.frame(p$`intervalType:blockType`)
# p
# Speed goal
Speed_Goal = Speed_Varying$.value - Speed_Fixed$.value
Speed_Goal = as.data.frame(Speed_Goal)
h = (hypothesis(Speed_Goal,"Speed_Goal<0"))
kable(as.data.frame(h$hypothesis),caption="Speed (varying vs. fixed)")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Speed goal: Varying - Fixed", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Congruent = (Speed_Varying_Congruent$.value - Accuracy_Varying_Congruent$.value) - (Speed_Fixed_Congruent$.value - Accuracy_Fixed_Congruent$.value)
Cost_Congruent = as.data.frame(Cost_Congruent)
h = (hypothesis(Cost_Congruent,"Cost_Congruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in congruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in congruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
View(Cost_Congruent)
# Speed goal
Cost_Incongruent = (Speed_Varying_Incongruent$.value - Accuracy_Varying_Incongruent$.value) - (Speed_Fixed_Incongruent$.value - Accuracy_Fixed_Incongruent$.value)
Cost_Incongruent = as.data.frame(Cost_Incongruent)
h = (hypothesis(Cost_Incongruent,"Cost_Incongruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in incongruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in incongruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# plot_model(model,type = "pred", terms = c("intervalType","blockType","Congruency"))
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
# Calculate the conditions
Speed_Fixed = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed")
posterior_summary(Speed_Fixed$.value)
Speed_Varying = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed")
posterior_summary(Speed_Varying$.value)
Accuracy_Fixed = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed")
Accuracy_Varying = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed")
#
# # Create a matrix
# p1 = ddply(p1,.(blockType,intervalType),plyr::summarize,
#                       estimate__ = posterior_summary(Estimate)[1],
#                       lower__ = posterior_summary(Estimate)[3],
#                       upper__ = posterior_summary(Estimate)[4])
# # Default plot
# p = conditional_effects(model, effects = "intervalType:blockType")
#
# # Convert to a data frame
# p = as.data.frame(p$`intervalType:blockType`)
# p
# Speed goal
Cost_Congruent = (Speed_Varying_Congruent$.value - Accuracy_Varying_Congruent$.value) - (Speed_Fixed_Congruent$.value - Accuracy_Fixed_Congruent$.value)
Cost_Congruent = as.data.frame(Cost_Congruent)
h = (hypothesis(Cost_Congruent,"Cost_Congruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in congruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in congruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Incongruent = (Speed_Varying_Incongruent$.value - Accuracy_Varying_Incongruent$.value) - (Speed_Fixed_Incongruent$.value - Accuracy_Fixed_Incongruent$.value)
Cost_Incongruent = as.data.frame(Cost_Incongruent)
h = (hypothesis(Cost_Incongruent,"Cost_Incongruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in incongruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in incongruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost = (Speed_Varying$.value - Accuracy_Varying$.value) - (Speed_Fixed$.value - Accuracy_Fixed$.value)
Cost = as.data.frame(Cost)
h = (hypothesis(Cost,"Cost<0"))
kable(as.data.frame(h$hypothesis),caption="Cost")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
Speed_Varying$.value
model = readRDS("Cluster/output/model.RT_Congruency.rds")
# plot_model(model,type = "pred", terms = c("intervalType","blockType","Congruency"))
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
# Calculate the conditions
Speed_Fixed = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed")
posterior_summary(Speed_Fixed$.value)
Speed_Varying = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed")
posterior_summary(Speed_Varying$.value)
Accuracy_Fixed = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed")
Accuracy_Varying = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed")
#
# # Create a matrix
# p1 = ddply(p1,.(blockType,intervalType),plyr::summarize,
#                       estimate__ = posterior_summary(Estimate)[1],
#                       lower__ = posterior_summary(Estimate)[3],
#                       upper__ = posterior_summary(Estimate)[4])
# # Default plot
# p = conditional_effects(model, effects = "intervalType:blockType")
#
# # Convert to a data frame
# p = as.data.frame(p$`intervalType:blockType`)
# p
# Speed goal
Cost = (Speed_Varying$.value - Accuracy_Varying$.value) - (Speed_Fixed$.value - Accuracy_Fixed$.value)
Cost = as.data.frame(Cost)
h = (hypothesis(Cost,"Cost<0"))
kable(as.data.frame(h$hypothesis),caption="Cost")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Congruent = (Speed_Varying_Congruent$.value - Accuracy_Varying_Congruent$.value) - (Speed_Fixed_Congruent$.value - Accuracy_Fixed_Congruent$.value)
Cost_Congruent = as.data.frame(Cost_Congruent)
h = (hypothesis(Cost_Congruent,"Cost_Congruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in congruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in congruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Incongruent = (Speed_Varying_Incongruent$.value - Accuracy_Varying_Incongruent$.value) - (Speed_Fixed_Incongruent$.value - Accuracy_Fixed_Incongruent$.value)
Cost_Incongruent = as.data.frame(Cost_Incongruent)
h = (hypothesis(Cost_Incongruent,"Cost_Incongruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in incongruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in incongruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost = (Speed_Varying$.value - Accuracy_Varying$.value) - (Speed_Fixed$.value - Accuracy_Fixed$.value)
Cost = as.data.frame(Cost)
h = (hypothesis(Cost,"Cost<0"))
kable(as.data.frame(h$hypothesis),caption="Cost")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
model = readRDS("Cluster/output/model.Acc_Congruency.rds")
# plot_model(model,type = "pred", terms = c("intervalType","blockType","Congruency"))
# Calculate the posteriors per condition
posterior=emmeans(model,specs=~intervalType|blockType|Congruency,epred = TRUE)
posteriorConditions = gather_emmeans_draws(posterior)
# Calculate the conditions
Speed_Fixed_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="congruent")
Speed_Varying_Congruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="congruent")
Accuracy_Fixed_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="congruent")
Accuracy_Varying_Congruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="congruent")
Speed_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed" & Congruency=="incongruent")
Speed_Varying_Incongruent = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed" & Congruency=="incongruent")
Accuracy_Fixed_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed" & Congruency=="incongruent")
Accuracy_Varying_Incongruent = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed" & Congruency=="incongruent")
# Calculate the conditions
Speed_Fixed = subset(posteriorConditions,intervalType=="Speed" & blockType=="Fixed")
posterior_summary(Speed_Fixed$.value)
Speed_Varying = subset(posteriorConditions,intervalType=="Speed" & blockType=="Mixed")
posterior_summary(Speed_Varying$.value)
Accuracy_Fixed = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Fixed")
Accuracy_Varying = subset(posteriorConditions,intervalType=="Accuracy" & blockType=="Mixed")
#
# # Create a matrix
# p1 = ddply(p1,.(blockType,intervalType),plyr::summarize,
#                       estimate__ = posterior_summary(Estimate)[1],
#                       lower__ = posterior_summary(Estimate)[3],
#                       upper__ = posterior_summary(Estimate)[4])
# # Default plot
# p = conditional_effects(model, effects = "intervalType:blockType")
#
# # Convert to a data frame
# p = as.data.frame(p$`intervalType:blockType`)
# p
# Speed goal
Cost = (Speed_Varying$.value - Accuracy_Varying$.value) - (Speed_Fixed$.value - Accuracy_Fixed$.value)
Cost = as.data.frame(Cost)
h = (hypothesis(Cost,"Cost<0"))
kable(as.data.frame(h$hypothesis),caption="Cost")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Congruent = (Speed_Varying_Congruent$.value - Accuracy_Varying_Congruent$.value) - (Speed_Fixed_Congruent$.value - Accuracy_Fixed_Congruent$.value)
Cost_Congruent = as.data.frame(Cost_Congruent)
h = (hypothesis(Cost_Congruent,"Cost_Congruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in congruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in congruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# Speed goal
Cost_Incongruent = (Speed_Varying_Incongruent$.value - Accuracy_Varying_Incongruent$.value) - (Speed_Fixed_Incongruent$.value - Accuracy_Fixed_Incongruent$.value)
Cost_Incongruent = as.data.frame(Cost_Incongruent)
h = (hypothesis(Cost_Incongruent,"Cost_Incongruent<0"))
kable(as.data.frame(h$hypothesis),caption="Cost in incongruent")
hist(Speed_Goal$Speed_Goal,col="lightblue", main="Cost in incongruent", xlab="", breaks = 30)
abline(v = 0, col="black", lwd=3, lty=2)
# clear the environment
rm(list=ls())
# set seed
set.seed(42)
#load packages and install them if they're not installed. the pacman package will
#automatically check for the requested packages and download & install them if they are not on the computer.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(brms,here,broom,knitr,tidyverse,plyr,cowplot,emmeans,tidybayes,viridis,MASS)
# Define the summary posterior function
summarize_posterior <- function(model,variable) {
post = posterior_samples(model, "^b")
ggplot(post,aes_string(x=paste0("`",variable,"`"))) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(variable,"p<0 = ",length(subset(post[[variable]],post[[variable]]<0))/length(post[[variable]]))) +
theme_classic()
}
# Define the difference summary posterior function
summarize_difference_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
# Define calculate the posterior probabilities function
posterior_probabilities <- function(model) {
parameter_names = rownames(summary(model)[["fixed"]])
post_prob = rep(0,length(parameter_names))
for (i in 1:length(parameter_names)){
t = hypothesis(model,paste0(parameter_names[i],"<0"))
post_prob[i] = t$hypothesis$Post.Prob
}
return(post_prob)
}
model = readRDS("Cluster/output/model.RT_Congruency.rds")
# Summary of the model
x=summary(model)[["fixed"]]
x$`HDI(95%)` = paste(format(round(x$`l-95% CI`, 2), nsmall = 2), format(round(x$`u-95% CI`, 2), nsmall = 2), sep=", ")
x$`l-95% CI` = NULL
x$`u-95% CI` = NULL
x$Bulk_ESS = NULL
x$Rhat = NULL
x$Tail_ESS = NULL
# add a row name column
names = rownames(x)
x = cbind(names,x)
rownames(x) = NULL
# add a row name column
# turn into numeric to round
x$Estimate = as.numeric(x$Estimate)
x$Est.Error = as.numeric(x$Est.Error)
# calculate the posterior probabilities
x$PostProb = posterior_probabilities(model)
# edit the column names
kable(x,digits = 2,col.names = c("Parameter", "Estimate", "SE", "CI (95%)","p<0"),align = "lrrrr")
View(x)
model = readRDS("Cluster/output/model.Acc_Congruency.rds")
# Summary of the model
x=summary(model)[["fixed"]]
x$`HDI(95%)` = paste(format(round(x$`l-95% CI`, 2), nsmall = 2), format(round(x$`u-95% CI`, 2), nsmall = 2), sep=", ")
x$`l-95% CI` = NULL
x$`u-95% CI` = NULL
x$Bulk_ESS = NULL
x$Rhat = NULL
x$Tail_ESS = NULL
# add a row name column
names = rownames(x)
x = cbind(names,x)
rownames(x) = NULL
# turn into numeric to round
x$Estimate = as.numeric(x$Estimate)
x$Est.Error = as.numeric(x$Est.Error)
# calculate the posterior probabilities
x$PostProb = posterior_probabilities(model)
# edit the column names
kable(x,digits = 2,col.names = c("Parameter", "Estimate", "SE", "CI (95%)","p<0"),align = "lrrrr")
View(x)
View(x)
# clear the environment
rm(list=ls())
# set seed
set.seed(42)
#load packages and install them if they're not installed. the pacman package will
#automatically check for the requested packages and download & install them if they are not on the computer.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(brms,here,broom,knitr,tidyverse,plyr,cowplot,emmeans,tidybayes,viridis,MASS)
# Define the summary posterior function
summarize_posterior <- function(model,variable) {
post = posterior_samples(model, "^b")
ggplot(post,aes_string(x=paste0("`",variable,"`"))) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(variable,"p<0 = ",length(subset(post[[variable]],post[[variable]]<0))/length(post[[variable]]))) +
theme_classic()
}
# Define the difference summary posterior function
summarize_difference_posterior <- function(V1,V2,effect) {
post = as.data.frame(V1-V2)
ggplot(data=post,aes(x=`V1 - V2`)) +
geom_histogram(bins=50) +
geom_vline(xintercept=0, linetype="dotted",size=1) +
labs(title=paste(effect,"p<0 = ",length(post[post<0])/length(post$`V1 - V2`))) +
theme_classic()
}
# Define calculate the posterior probabilities function
posterior_probabilities <- function(model) {
parameter_names = rownames(summary(model)[["fixed"]])
post_prob = rep(0,length(parameter_names))
for (i in 1:length(parameter_names)){
t = hypothesis(model,paste0(parameter_names[i],"<0"))
post_prob[i] = t$hypothesis$Post.Prob
}
return(post_prob)
}
